/*
 * Copyright 2014 Red Hat, Inc.
 *
 * Red Hat licenses this file to you under the Apache License, version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License.  You may obtain a copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

package io.vertx.scala.ext.consul

import io.vertx.lang.scala.json.Json._
import io.vertx.core.json.JsonObject
import scala.collection.JavaConverters._
import io.vertx.ext.consul.{PreparedQueryDefinition => JPreparedQueryDefinition}

/**
  * Defines a prepared query.
  */
class PreparedQueryDefinition(private val _asJava: JPreparedQueryDefinition) {

  def asJava = _asJava

  /**
    * Specifies a fixed list of remote datacenters to forward the query to if there are no healthy nodes
    * in the local datacenter. Datacenters are queried in the order given in the list. If this option is combined
    * with NearestN, then the NearestN queries will be performed first, followed by the list given by Datacenters.
    * A given datacenter will only be queried one time during a failover, even if it is selected by both NearestN
    * and is listed in Datacenters.
    */
  def setDcs(value: scala.collection.mutable.Buffer[String]) = {
    asJava.setDcs(value.asJava)
    this
  }
  def getDcs: scala.collection.mutable.Buffer[String] = {
    asJava.getDcs().asScala.map(x => x.asInstanceOf[String])
  }

  /**
    * Set the TTL duration when query results are served over DNS. If this is specified,
    * it will take precedence over any Consul agent-specific configuration.
    */
  def setDnsTtl(value: String) = {
    asJava.setDnsTtl(value)
    this
  }
  def getDnsTtl: String = {
    asJava.getDnsTtl().asInstanceOf[String]
  }

  /**
    * Set ID of the query, always generated by Consul
    */
  def setId(value: String) = {
    asJava.setId(value)
    this
  }
  def getId: String = {
    asJava.getId().asInstanceOf[String]
  }

  /**
    * Set a list of user-defined key/value pairs that will be used for filtering the query results to nodes
    * with the given metadata values present.
    */
  def setMeta(value: Map[String, String]) = {
    asJava.setMeta(value.asJava)
    this
  }
  def getMeta: scala.collection.mutable.Map[String, String] = {
    collection.mutable.Map(asJava.getMeta().asScala.mapValues(x => x.asInstanceOf[String]).toSeq: _*)
  }

  /**
    * Set an optional friendly name that can be used to execute a query instead of using its ID
    */
  def setName(value: String) = {
    asJava.setName(value)
    this
  }
  def getName: String = {
    asJava.getName().asInstanceOf[String]
  }

  /**
    * Specifies that the query will be forwarded to up to NearestN other datacenters based on their estimated network
    * round trip time using Network Coordinates from the WAN gossip pool. The median round trip time from the server
    * handling the query to the servers in the remote datacenter is used to determine the priority.
    */
  def setNearestN(value: Int) = {
    asJava.setNearestN(value)
    this
  }
  def getNearestN: Int = {
    asJava.getNearestN().asInstanceOf[Int]
  }

  /**
    * Specifies the behavior of the query's health check filtering. If this is set to false, the results will include
    * nodes with checks in the passing as well as the warning states. If this is set to true,
    * only nodes with checks in the passing state will be returned.
    */
  def setPassing(value: Boolean) = {
    asJava.setPassing(value)
    this
  }
  def getPassing: Boolean = {
    asJava.getPassing().asInstanceOf[Boolean]
  }

  /**
    * Set the name of the service to query
    */
  def setService(value: String) = {
    asJava.setService(value)
    this
  }
  def getService: String = {
    asJava.getService().asInstanceOf[String]
  }

  /**
    * Set the ID of an existing session. This provides a way to automatically remove a prepared query when
    * the given session is invalidated. If not given the prepared query must be manually removed when no longer needed.
    */
  def setSession(value: String) = {
    asJava.setSession(value)
    this
  }
  def getSession: String = {
    asJava.getSession().asInstanceOf[String]
  }

  /**
    * Set a list of service tags to filter the query results. For a service to pass the tag filter
    * it must have all of the required tags, and none of the excluded tags (prefixed with `!`).
    */
  def setTags(value: scala.collection.mutable.Buffer[String]) = {
    asJava.setTags(value.asJava)
    this
  }
  def getTags: scala.collection.mutable.Buffer[String] = {
    asJava.getTags().asScala.map(x => x.asInstanceOf[String])
  }

  /**
    * Set regular expression which is used to extract fields from the entire name, once this template is selected.
    */
  def setTemplateRegexp(value: String) = {
    asJava.setTemplateRegexp(value)
    this
  }
  def getTemplateRegexp: String = {
    asJava.getTemplateRegexp().asInstanceOf[String]
  }

  /**
    * The template type, which must be `name_prefix_match`. This means that the template will apply to
    * any query lookup with a name whose prefix matches the Name field of the template.
    */
  def setTemplateType(value: String) = {
    asJava.setTemplateType(value)
    this
  }
  def getTemplateType: String = {
    asJava.getTemplateType().asInstanceOf[String]
  }

  /**
    * Set the ACL token to use each time the query is executed. This allows queries to be executed by clients
    * with lesser or even no ACL Token, so this should be used with care.
    */
  def setToken(value: String) = {
    asJava.setToken(value)
    this
  }
  def getToken: String = {
    asJava.getToken().asInstanceOf[String]
  }
}

object PreparedQueryDefinition {
  
  def apply() = {
    new PreparedQueryDefinition(new JPreparedQueryDefinition(emptyObj()))
  }
  
  def apply(t: JPreparedQueryDefinition) = {
    if (t != null) {
      new PreparedQueryDefinition(t)
    } else {
      new PreparedQueryDefinition(new JPreparedQueryDefinition(emptyObj()))
    }
  }
  
  def fromJson(json: JsonObject): PreparedQueryDefinition = {
    if (json != null) {
      new PreparedQueryDefinition(new JPreparedQueryDefinition(json))
    } else {
      new PreparedQueryDefinition(new JPreparedQueryDefinition(emptyObj()))
    }
  }
}
