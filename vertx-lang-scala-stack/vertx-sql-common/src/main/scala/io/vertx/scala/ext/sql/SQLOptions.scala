/*
 * Copyright 2014 Red Hat, Inc.
 *
 * Red Hat licenses this file to you under the Apache License, version 2.0
 * (the "License"); you may not use this file except in compliance with the
 * License.  You may obtain a copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
 * License for the specific language governing permissions and limitations
 * under the License.
 */

package io.vertx.scala.ext.sql

import io.vertx.lang.scala.json.Json._
import io.vertx.core.json.JsonObject
import scala.collection.JavaConverters._
import io.vertx.core.json.JsonArray
import io.vertx.ext.sql.{SQLOptions => JSQLOptions}

/**
  * Represents the options one can use to customize the unwrapped connection/statement/resultset types
  */
class SQLOptions(private val _asJava: JSQLOptions) {

  def asJava = _asJava
  def setAutoGeneratedKeys(value: Boolean) = {
    asJava.setAutoGeneratedKeys(value)
    this
  }
  def isAutoGeneratedKeys: Boolean = {
    asJava.isAutoGeneratedKeys().asInstanceOf[Boolean]
  }
  def setAutoGeneratedKeysIndexes(value: io.vertx.core.json.JsonArray) = {
    asJava.setAutoGeneratedKeysIndexes(value)
    this
  }
  def getAutoGeneratedKeysIndexes: io.vertx.core.json.JsonArray = {
    asJava.getAutoGeneratedKeysIndexes()
  }
  def setCatalog(value: String) = {
    asJava.setCatalog(value)
    this
  }
  def getCatalog: String = {
    asJava.getCatalog().asInstanceOf[String]
  }
  def setFetchDirection(value: io.vertx.ext.sql.FetchDirection) = {
    asJava.setFetchDirection(value)
    this
  }
  def getFetchDirection: io.vertx.ext.sql.FetchDirection = {
    asJava.getFetchDirection()
  }
  def setFetchSize(value: Int) = {
    asJava.setFetchSize(value)
    this
  }
  def getFetchSize: Int = {
    asJava.getFetchSize().asInstanceOf[Int]
  }
  def setQueryTimeout(value: Int) = {
    asJava.setQueryTimeout(value)
    this
  }
  def getQueryTimeout: Int = {
    asJava.getQueryTimeout().asInstanceOf[Int]
  }
  def setReadOnly(value: Boolean) = {
    asJava.setReadOnly(value)
    this
  }
  def isReadOnly: Boolean = {
    asJava.isReadOnly().asInstanceOf[Boolean]
  }
  def setResultSetConcurrency(value: io.vertx.ext.sql.ResultSetConcurrency) = {
    asJava.setResultSetConcurrency(value)
    this
  }
  def getResultSetConcurrency: io.vertx.ext.sql.ResultSetConcurrency = {
    asJava.getResultSetConcurrency()
  }
  def setResultSetType(value: io.vertx.ext.sql.ResultSetType) = {
    asJava.setResultSetType(value)
    this
  }
  def getResultSetType: io.vertx.ext.sql.ResultSetType = {
    asJava.getResultSetType()
  }
  def setSchema(value: String) = {
    asJava.setSchema(value)
    this
  }
  def getSchema: String = {
    asJava.getSchema().asInstanceOf[String]
  }
  def setTransactionIsolation(value: io.vertx.ext.sql.TransactionIsolation) = {
    asJava.setTransactionIsolation(value)
    this
  }
  def getTransactionIsolation: io.vertx.ext.sql.TransactionIsolation = {
    asJava.getTransactionIsolation()
  }
}

object SQLOptions {
  
  def apply() = {
    new SQLOptions(new JSQLOptions(emptyObj()))
  }
  
  def apply(t: JSQLOptions) = {
    if (t != null) {
      new SQLOptions(t)
    } else {
      new SQLOptions(new JSQLOptions(emptyObj()))
    }
  }
  
  def fromJson(json: JsonObject): SQLOptions = {
    if (json != null) {
      new SQLOptions(new JSQLOptions(json))
    } else {
      new SQLOptions(new JSQLOptions(emptyObj()))
    }
  }
}
