@includeNamed{'ceylon-common.templ'}
@includeNamed{'ceylon-imports.templ'}

@code{
  def genPropTypeDecl(prop) {
    var type = prop.type;
    var decl = "not_handled: " + type + " " + type.class + " " + type.kind;
    var kind = type.kind;
    if (kind == CLASS_API) {
      decl = type.simpleName;
    } else if (kind == CLASS_STRING) {
      decl = 'String';
    } else if (isInteger(type)) {
      decl = 'Integer';
    } else if (isFloat(type)) {
      decl = 'Float';
    } else if (isBoolean(type)) {
      decl = 'Boolean';
    } else if (kind == CLASS_DATA_OBJECT) {
      decl = type.simpleName;
    } else if (kind == CLASS_JSON_OBJECT) {
      decl = 'JsonObject';
    } else if (kind == CLASS_JSON_ARRAY) {
      decl = 'JsonArray';
    } else if (kind == CLASS_ENUM) {
      if (type.gen) {
        decl = type.simpleName;
      } else {
        decl = 'String';
      }
    } else {
      return 'Nothing /* ' + prop +  ' */';
    }
    if (prop.kind.value) {
      return decl;
    } else if (prop.kind.list || prop.kind.set) {
      return '{' + decl + '*}';
    } else if (prop.kind.map) {
      return 'Map<String, ' + decl + '>';
    } else {
      return 'Nothing /* ' + prop +  ' */';
    }
  }

  def genPropToCeylonExpr(prop, expr) {
    var type = prop.type;
    if (prop.kind.value) {
      if (type.kind == CLASS_STRING) {
        return expr + '.getStringOrNull("' + prop.name + '")';
      } else if (isInteger(type)) {
        return expr + '.getIntegerOrNull("' + prop.name + '")';
      } else if (isBoolean(type)) {
        return expr + '.getBooleanOrNull("' + prop.name + '")';
      } else if (isFloat(type)) {
        return expr + '.getFloatOrNull("' + prop.name + '")';
      } else if (type.kind == CLASS_JSON_OBJECT) {
        return expr + '.getObjectOrNull("' + prop.name + '")';
      } else if (type.kind == CLASS_JSON_ARRAY) {
        return expr + '.getArrayOrNull("' + prop.name + '")';
      } else if (type.kind == CLASS_DATA_OBJECT) {
        return 'if (exists tmp = ' + expr +  '.getObjectOrNull("' + prop.name + '")) then ' + CASE_CAMEL.to(CASE_LOWER_CAMEL, type.simpleName) + '_.fromJson(tmp) else null';
      } else if (type.kind == CLASS_ENUM) {
        if (type.gen) {
          return 'if (exists tmp = ' + expr + '.getStringOrNull("' + prop.name + '")) then ' + CASE_CAMEL.to(CASE_LOWER_CAMEL, type.simpleName) + '_.fromString(tmp) else null';
        } else {
          return expr + '.getStringOrNull("' + prop.name + '")';
        }
      }
    } else if (prop.kind.list) {
      if (type.kind == CLASS_STRING) {
        return expr + '.getArrayOrNull("' + prop.name + '")?.strings';
      } else if (isInteger(type)) {
        return expr + '.getArrayOrNull("' + prop.name + '")?.integers';
      } else if (isFloat(type)) {
        return expr + '.getArrayOrNull("' + prop.name + '")?.floats';
      } else if (isBoolean(type)) {
        return expr + '.getArrayOrNull("' + prop.name + '")?.booleans';
      } else if (type.kind == CLASS_JSON_OBJECT) {
        return expr + '.getArrayOrNull("' + prop.name + '")?.objects';
      } else if (type.kind == CLASS_JSON_ARRAY) {
        return expr + '.getArrayOrNull("' + prop.name + '")?.arrays';
      } else if (type.kind == CLASS_DATA_OBJECT) {
        return expr + '.getArrayOrNull("' + prop.name + '")?.objects?.map(' + CASE_CAMEL.to(CASE_LOWER_CAMEL, type.simpleName) + '_.fromJson)';
      } else if (type.kind == CLASS_ENUM) {
        if (type.gen) {
          return expr + '.getArrayOrNull("' + prop.name + '")?.strings?.map(' + CASE_CAMEL.to(CASE_LOWER_CAMEL, type.simpleName) + '_.fromString)';
        } else {
          return expr + '.getArrayOrNull("' + prop.name + '")?.strings';
        }
      }
    } else if (prop.kind.map) {
      if (type.kind == CLASS_STRING) {
        return 'if (exists tmp = ' + expr + '.getObjectOrNull("' + prop.name + '")) then HashMap { for(key->val in tmp) if (is String val) key->val } else null';
      } else if (isInteger(type)) {
        return 'if (exists tmp = ' + expr + '.getObjectOrNull("' + prop.name + '")) then HashMap { for(key->val in tmp) if (is Integer val) key->val } else null';
      } else if (isFloat(type)) {
        return 'if (exists tmp = ' + expr + '.getObjectOrNull("' + prop.name + '")) then HashMap { for(key->val in tmp) if (is Float val) key->val } else null';
      } else if (isBoolean(type)) {
        return 'if (exists tmp = ' + expr + '.getObjectOrNull("' + prop.name + '")) then HashMap { for(key->val in tmp) if (is Boolean val) key->val } else null';
      } else if (type.kind == CLASS_JSON_OBJECT) {
        return 'if (exists tmp = ' + expr + '.getObjectOrNull("' + prop.name + '")) then HashMap { for(key->val in tmp) if (is JsonObject val) key->val } else null';
      } else if (type.kind == CLASS_JSON_ARRAY) {
        return 'if (exists tmp = ' + expr + '.getObjectOrNull("' + prop.name + '")) then HashMap { for(key->val in tmp) if (is JsonArray val) key->val } else null';
      } else if (type.kind == CLASS_DATA_OBJECT) {
        return 'if (exists tmp = ' + expr + '.getObjectOrNull("' + prop.name + '")) then HashMap { for(key->val in tmp) if (is JsonObject val) key->' + CASE_CAMEL.to(CASE_LOWER_CAMEL, type.simpleName) + '_.fromJson(val) } else null';
      } if (type.kind == CLASS_ENUM) {
        if (type.gen) {
          return 'if (exists tmp = ' + expr + '.getObjectOrNull("' + prop.name + '")) then HashMap { for(key->val in tmp) if (is String val) key->' + CASE_CAMEL.to(CASE_LOWER_CAMEL, type.simpleName) + '_.fromString(val) } else null';
        } else {
          return 'if (exists tmp = ' + expr + '.getObjectOrNull("' + prop.name + '")) then HashMap { for(key->val in tmp) if (is String val) key->val } else null';
        }
      }
    }
    return 'null /* ' + type + ' not handled */';
  }
}

@code{
  addClassImport("io.vertx.core.json", "JsonObject", "JsonObject_");
  addClassImport("io.vertx.core.json", "JsonArray", "JsonArray_");
  addClassImport("ceylon.json", "Object", "JsonObject");
  addClassImport("ceylon.json", "Array", "JsonArray");
  addClassImport("ceylon.json", "parse", "parse");
  addClassImport("ceylon.collection", "HashMap", "HashMap");
  addClassImport("io.vertx.lang.ceylon", "BaseDataObject", "BaseDataObject");
  addClassImport("io.vertx.lang.ceylon", "Converter", "Converter");
  addClassImport("io.vertx.lang.ceylon", "ToJava", "ToJava");

  props=new java.util.ArrayList();
  for (prop : properties) {
    var propType = prop.type;
    var propKind = propType.kind;
    if (propKind.basic || propKind.json || propKind == CLASS_DATA_OBJECT || propKind == CLASS_ENUM) {
      props.add(prop);
    }
    if (propKind == CLASS_DATA_OBJECT || (propKind == CLASS_ENUM && prop.type.gen)) {
      addClassImport(propType.translatePackageName(TRANSLATOR_COMPOSITE), propType.simpleName, propType.simpleName);
      var objectName = CASE_CAMEL.to(CASE_LOWER_CAMEL, propType.simpleName);
      addClassImport(propType.translatePackageName(TRANSLATOR_COMPOSITE), objectName, objectName + '_');
    }
  }
  for (superType : superTypes) {
    addClassImport(superType.translatePackageName(TRANSLATOR_COMPOSITE), superType.simpleName, superType.simpleName);
  }
  addClassImport(type.packageName, type.simpleName, type.simpleName + "_");
}

@comment{"Generate the imports"}
@includeNamed{'genImports'}

/* Generated from @{type.name} */\n
@if{doc != null}
"@{genDoc(doc)}"\n
@end{}
shared @if{isClass}class@else{}interface@end{} @{type.simpleName}@if{isClass}(
	@foreach{prop:props}
	@if{prop.declared && prop.doc != null}
\n
  "@{genDoc(prop.doc)}"
	@end{}
\n  @if{prop.declared}shared @end{}@{genPropTypeDecl(prop)}? @{toCeylonIdentifier(prop.name)} = null
	@end{','})@if{superType != null} extends @{superType.simpleName}(
	@code{var prev = '\n'}
	@foreach{prop:props}
	@if{!prop.declared}
	@{prev}  @{toCeylonIdentifier(prop.name)}
	@code{prev = ',\n'}
	@end{}
	@end{})@end{}@end{}@if{abstractSuperTypes.size() > 0} satisfies\n
	@foreach{abstractSuperType : abstractSuperTypes}
  @{abstractSuperType.simpleName}
	@end{' &\n'}
@end{} @if{abstractSuperTypes.empty}satisfies@else{}&@end{} BaseDataObject {\n
  shared actual default JsonObject toJson() {\n
    value json = @if{superType != null}super.toJson()@else{}JsonObject()@end{};\n
@foreach{prop:props}
	@if{prop.declared}
		@code{propName=toCeylonIdentifier(prop.name)}
		@code{propType=prop.type}
    if (exists @{propName}) {\n
		@if{prop.kind.value}
			@if{propType.kind.basic || propType.kind.json}
      json.put("@{prop.name}", @{propName});\n
			@else{propType.kind == CLASS_DATA_OBJECT}
      json.put("@{prop.name}", @{propName}.toJson());\n
			@else{propType.kind == CLASS_ENUM}
				@if{propType.gen}
      json.put("@{prop.name}", @{CASE_CAMEL.to(CASE_LOWER_CAMEL, prop.type.simpleName)}_.toString(@{propName}));\n
				@else{}
      json.put("@{prop.name}", @{propName});\n
				@end{}
			@end{}
		@else{prop.kind.list}
			@if{propType.kind.basic || propType.kind.json}
      json.put("@{prop.name}", JsonArray(@{propName}));\n
			@else{propType.kind == CLASS_DATA_OBJECT}
      json.put("@{prop.name}", JsonArray(@{propName}.map(@{CASE_CAMEL.to(CASE_LOWER_CAMEL, prop.type.simpleName)}_.toJson)));\n
			@else{propType.kind == CLASS_ENUM}
				@if{propType.gen}
      json.put("@{prop.name}", JsonArray(@{propName}.map(@{CASE_CAMEL.to(CASE_LOWER_CAMEL, prop.type.simpleName)}_.toString)));\n
				@else{}
      json.put("@{prop.name}", JsonArray(@{propName}));\n
				@end{}
			@else{}
      throw Exception("not yet implemented");\n
			@end{}
		@else{prop.kind.map}
			@if{propType.kind.basic || propType.kind.json}
      json.put("@{prop.name}", JsonObject(@{propName}));\n
			@else{propType.kind == CLASS_DATA_OBJECT}
      json.put("@{prop.name}", JsonObject{for(k->v in @{propName}) k->@{CASE_CAMEL.to(CASE_LOWER_CAMEL, prop.type.simpleName)}_.toJson(v)});\n
			@else{propType.kind == CLASS_ENUM}
				@if{propType.gen}
      json.put("@{prop.name}", JsonObject{for(k->v in @{propName}) k->@{CASE_CAMEL.to(CASE_LOWER_CAMEL, prop.type.simpleName)}_.toString(v)});\n
				@else{}
      json.put("@{prop.name}", JsonObject(@{propName}));\n
				@end{}
			@else{}
      throw Exception("not yet implemented");\n
			@end{}
		@else{}
      throw Exception("not yet implemented");\n
		@end{}
    }\n
	@end{}
@end{}
    return json;\n
  }\n
}\n

\n
shared object @{CASE_CAMEL.to(CASE_LOWER_CAMEL, type.simpleName)} {\n

@if{isClass}
\n
  shared @{type.simpleName} fromJson(JsonObject json) {\n
	@foreach{prop:props}
		@code{propName=toCeylonIdentifier(prop.name)}
		@code{propType=prop.type}
    @{genPropTypeDecl(prop)}? @{propName} = @{genPropToCeylonExpr(prop, 'json')};\n
	@end{}
    return @{type.simpleName} {\n
	@foreach{prop:props}
		@code{propName=toCeylonIdentifier(prop.name)}
      @{propName} = @{propName};\n
	@end{}
    };\n
  }\n
	@if{jsonifiable}
\n
  shared object toCeylon extends Converter<@{type.simpleName}_, @{type.simpleName}>() {\n
    shared actual @{type.simpleName} convert(@{type.simpleName}_ src) {\n
      value json = parse(src.toJson().string);\n
      assert(is JsonObject json);\n
      return fromJson(json);\n
    }\n
  }\n
	@end{}
@end{}

@if{isClass && concrete}
\n
  shared object toJava extends Converter<@{type.simpleName}, @{type.simpleName}_>() {\n
    shared actual @{type.simpleName}_ convert(@{type.simpleName} src) {\n
      // Todo : make optimized version without json\n
      value json = JsonObject_(src.toJson().string);\n
      value ret = @{type.simpleName}_(json);\n
      return ret;\n
    }\n
  }\n

  shared JsonObject toJson(@{type.simpleName} obj) => obj.toJson();\n
@end{}

}\n
