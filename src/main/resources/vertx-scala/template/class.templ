@comment{"# Template for Scala code generation"}

@comment{"# Defines a few helper functions"}

/*\n
 * Copyright 2014 Red Hat, Inc.\n
 *\n
 * Red Hat licenses this file to you under the Apache License, version 2.0\n
 * (the "License"); you may not use this file except in compliance with the\n
 * License.  You may obtain a copy of the License at:\n
 *\n
 * http://www.apache.org/licenses/LICENSE-2.0\n
 *\n
 * Unless required by applicable law or agreed to in writing, software\n
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT\n
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n
 * License for the specific language governing permissions and limitations\n
 * under the License.\n
 */\n\n

package @{ifacePackageName.replace("io.vertx.", "io.vertx.scala.")}\n
\n

@comment{"# Generate the imports"}
@foreach{importedType : importedTypes}
	@if{importedType.kind == CLASS_API}
		@if{!ifacePackageName.equals(importedType.packageName)}
import @{importedType.toString().replace("io.vertx.", "io.vertx.scala.")}\n
		@end{}
	@else{}
		@if{!importedType.packageName.equals("java.lang")}
import @{importedType}\n
		@end{}
	@end{}
@end{}
\n

@comment{"# Generate the Class or Interface/Trait"}
@code{
  def getVarianceType(t) {
    return t;
  }

  def getClassNameWithTypeInfo(c, typeName) {
    var genericType = helper.getGenericType(c);
    if (genericType != null) {
      return typeName + '[' + getVarianceType(genericType) + ']';
    } else {
      return typeName;
    }
  }

  def getClassName(c) {
    var typeName = helper.getSimpleName(helper.getNonGenericType(c));
    return getClassNameWithTypeInfo(c, typeName);
  }

  def toScalaGeneric(c) {
    var typeName = helper.getNonGenericType(c);
    return getClassNameWithTypeInfo(c, typeName);
  }
}

@declare{'writeDelegateType'}
	@if{typeParams.size() > 0}
		@{type.raw.name}[@foreach{typeParam: typeParams}@if{typeParam.covariant}+@else{typeParam.contravariant}-@end{}@end{', '}]
	@else{}
		@{type.raw.name}
	@end{}
@end{}

@if{concrete}
class @{getClassName(ifaceFQCN)}(private val delegate: @includeNamed{'writeDelegateType'})
@else{}
trait @{getClassName(ifaceFQCN)}
@end{}

@comment{"## Inheritance"}
@comment{"TODO"}
@if{abstractSuperTypes.size() > 0}
	 extends @foreach{abstractSuperType : abstractSuperTypes}@{abstractSuperType.simpleName}@end{' with '}
@else{}
	 extends Delegating
@end{}

 {\n
\n

@comment{"# Generate the methods"}
@comment{"TODO"}

}\n
\n
