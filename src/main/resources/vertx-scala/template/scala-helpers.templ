@code{

  def toScalaType(type) {
    var nullable = type.isNullable;
    var ret = '';
    if (type.name == 'void' || type.name == 'java.lang.Void') {
      ret = 'Unit';
    } else if (type.name == 'Object' || type.name == 'java.lang.Object') {
      ret = 'AnyRef';
    } else if (type.name == 'Throwable' || type.name == 'java.lang.Throwable') {
      ret = 'Throwable';
    } else if (type.kind == CLASS_STRING) {
      ret = 'String';
    } else if (type.kind == CLASS_PRIMITIVE || type.kind == CLASS_BOXED_PRIMITIVE) {
      if (type.name == 'byte' || type.name == 'java.lang.Byte') {
        ret = 'Byte';
      } else if (type.name == 'short' || type.name == 'java.lang.Short') {
        ret = 'Short';
      } else if (type.name == 'int' || type.name == 'java.lang.Integer') {
        ret = 'Int';
      } else if (type.name == 'long' || type.name == 'java.lang.Long') {
        ret = 'Long';
      } else if (type.name == 'float' || type.name == 'java.lang.Float') {
        ret = 'Float';
      } else if (type.name == 'double' || type.name == 'java.lang.Double') {
        ret = 'Double';
      } else if (type.name == 'boolean' || type.name == 'java.lang.Boolean') {
        ret = 'Boolean';
      } else if (type.name == 'char' || type.name == 'java.lang.Character') {
        ret = 'Char';
      }
    } else if (type.kind == CLASS_DATA_OBJECT) {
      ret = type.translateName("scala");
    }
    else if (type.kind == CLASS_ENUM) {
      ret = type.name;
    } else if (type.kind == CLASS_LIST){
        if(type.args.isEmpty)
          ret = 'scala.collection.mutable.Buffer';
        else if(type.args[0].params.isEmpty())
          ret = 'scala.collection.mutable.Buffer[' + toScalaType(type.args[0]) + ']';
        else
          ret = 'scala.collection.mutable.Buffer[' + toScalaType(type.args[0]) + '[_]]';
    } else if (type.kind == CLASS_SET){
        if(type.args.isEmpty)
          ret = 'Set';
        else if(type.args[0].params.isEmpty())
          ret = 'Set[' + toScalaType(type.args[0]) + ']';
        else
          ret = 'Set[' + toScalaType(type.args[0]) + '[_]]';
    } else if (type.kind == CLASS_MAP){
        if(type.args.isEmpty)
          ret = 'Map';
        else if(type.args[0].params.isEmpty())
          ret = 'Map[' + toScalaType(type.args[0]) + ', ' + toScalaType(type.args[1]) + ']';
        else
          ret ='Map[' + toScalaType(type.args[0]) + '[_], ' + toScalaType(type.args[1]) + '[_]]';
    } else if (type.kind == CLASS_HANDLER) {
      var type = toScalaType(type.args[0]);
      if (type.equals("Unit")) {
        ret = "() => Unit";
      } else {
        ret = type + " => Unit";
      }
    } else if (type.kind == CLASS_FUNCTION) {
      var type1 = changeJavaGenericNotationToScalaNotation(type.args[0]);
      var type2 = changeJavaGenericNotationToScalaNotation(type.args[1]);

      var ret = "";
      if (type1.equals("Unit")) {
        ret = "() => "+type2;
      } else {
        ret = type1 + " => " + type2;
      }
      ret = ret
    } else if (type.kind == CLASS_JSON_OBJECT ||
               type.kind == CLASS_JSON_ARRAY){
      ret = changeJavaGenericNotationToScalaNotation(type)
    } else if(type.kind == CLASS_ASYNC_RESULT) {
      if(type.args.isEmpty)
        ret = 'io.vertx.core.AsyncResult';
      else
        ret = 'io.vertx.core.AsyncResult [' + toScalaType(type.args[0]) + ']';
    } else if (type.kind == CLASS_API) {
      var retVal = helper.getNonGenericType(type.translateName("scala"));
      if (type instanceof io.vertx.codegen.type.ParameterizedTypeInfo) {
        retVal += '[';
        var first = true;
        for (arg : type.args) {
          if (first) {
            first = false;
          } else {
            retVal += ', ';
          }
          retVal += toScalaType(arg);
        }
        retVal += ']';
      }
      ret = retVal;
    }
    else {
      ret = changeJavaGenericNotationToScalaNotation(type);
    }
    return ret;
  }

  def isKeyword(possibleKeyword) {
    if(possibleKeyword.equals("type")) {
      return true;
    }
    return false;
  }

  def escapeIfKeyword(possibleKeyword) {
    if(isKeyword(possibleKeyword)) {
      return '`' + possibleKeyword + '`';
    }
    return possibleKeyword;
  }




  def handleOption(param) {
    if(param.type.isNullable) {
      if (param.type.kind == CLASS_API || param.type.kind == CLASS_DATA_OBJECT) {
        return '(if('+param.name+'.isDefined) '+param.name+'.get.asJava else null)'
      }
      else if(param.type.kind == CLASS_HANDLER) {
        return param.name;
      }
      else {
        return '(if('+param.name+'.isDefined) '+param.name+'.get else null)';
      }
    }
    else {
      if (param.type.kind == CLASS_API) {
        return param.name + '.asJava.asInstanceOf[' + changeJavaGenericNotationToScalaNotation(param.type) +']'
      }
      else if(param.type.kind == CLASS_DATA_OBJECT) {
        return param.name + '.asJava';
      }
      else {
        return param.name;
      }
    }
  }

  def handleOptionForCollection(param, applyToValue) {
    if(param.type.isNullable) {
      return 'if('+param.name+'.isDefined) '+param.name+'.get'+applyToValue+' else null'
    }
    else {
      return param.name+applyToValue;
    }
  }

  def toOptionIfNullable(value, type) {
    if(type.isNullable && type.kind != CLASS_HANDLER ) {
      return 'scala.Option['+value+']';
    }
    else {
      return value;
    }
  }

  def toOptionIfNullableAndParam(value, type, param) {
    if(param.type.kind != CLASS_HANDLER && ((param.type.kind != CLASS_OBJECT && param.isNullable) || type.isNullable)) {
      return 'scala.Option['+value+']';
    }
    else {
      return value;
    }
  }



  def changeJavaGenericNotationToScalaNotation(type) {
    type.name.replace('<', '[').replace('>', ']');
  }

  def getGenericType(name) {
    var start = name.indexOf("<");
    if (start >= 0) {
       var end = name.indexOf(">");
       return '[' + name.substring(start + 1, end) + ']';
    }
    return '';
  }

  /*TODO get rid of apply*/
  def toScalaApply(name) {
    helper.getNonGenericType(name) + '.apply' + getGenericType(name);
  }

  def toScalaApplyWithParam(name, param) {
    helper.getNonGenericType(name) + '.apply' + getGenericType(name) + '(' + param + ')';
  }

  def isAsyncResult(param) {
    param.type.kind == CLASS_HANDLER && param.type.args[0].kind == CLASS_ASYNC_RESULT;
  }

  def importJavaConversions(method) {
    for (param : method.params) {
      if ((param.type.kind == CLASS_HANDLER &&
           param.type.args[0].kind.collection) ||
          (isAsyncResult(param) &&
           param.type.args[0].args[0].kind.collection) ||
          param.type.kind.collection) {
        return true;
      }
    }

    return method.returnType.kind.collection;
  }

  def returnTypeOf(method) {
    if(shouldMethodReturnAFuture(method)) {
      'concurrent.Future['+toScalaType(typeOfReturnedFuture(method))+']';
    } else if (method.fluent) {
      toOptionIfNullable(toScalaType(method.returnType), method.returnType);
    } else if (method.returnType instanceof io.vertx.codegen.type.VoidTypeInfo) {
      'Unit';
    } else {
      toOptionIfNullable(toScalaType(method.returnType), method.returnType);
    }
  }

  def returnTypeOfNotNullable(method) {
    if (method.fluent) {
      toScalaType(method.returnType);
    } else if (method.returnType instanceof io.vertx.codegen.type.VoidTypeInfo) {
      'Unit';
    } else {
      toScalaType(method.returnType);
    }
  }

  def methodParams(method) {
    var paramList = '';
    var first = true;
    for (param : method.params) {
        if(!(param.type.kind == CLASS_HANDLER && param.type.args[0].kind == CLASS_ASYNC_RESULT && !method.isFluent && !(method.returnType.kind == CLASS_HANDLER))) {
            if (first) {
              first = false;
            } else {
              paramList += ', ';
            }
            paramList += escapeIfKeyword(param.name) + ': ' + toOptionIfNullableAndParam(toScalaType(param.type), param.type, param);
        }
    }
    paramList;
  }

  def multiMethodParams(method) {
    params = methodParams(method);
    if (params.isEmpty()) {
      params = '()';
    } else {
      params = '(' + params + ')';
    }
  }

  def shouldMethodReturnAFuture(method) {
    var size = method.params.size;
    return size > 0 && method.params[size-1].type.kind == CLASS_HANDLER && method.params[size-1].type.args[0].kind == CLASS_ASYNC_RESULT && !(method.returnType.kind == CLASS_HANDLER);
  }

  def typeOfReturnedFuture(method) {
    return method.params[method.params.size-1].type.args[0].args[0];
  }

  def createGenericFromTypeWithParamName(type, paramName) {
    var invocation = '';
    if (type.kind == CLASS_API ||
        type.kind == CLASS_DATA_OBJECT ||
        type.kind == CLASS_ENUM) {
      invocation += toScalaApplyWithParam(type.getSimpleName(), paramName);
    } else if (type.kind == CLASS_PRIMITIVE ||
               type.kind == CLASS_BOXED_PRIMITIVE ||
               type.name == 'Throwable' ||
               type.name == 'java.lang.Throwable') {
      invocation += paramName + ':' + toOptionIfNullable(toScalaType(type), type);
    } else if (type.kind == CLASS_STRING ||
               type.kind == CLASS_JSON_OBJECT ||
               type.kind == CLASS_JSON_ARRAY) {
      invocation += paramName;
    }
    return invocation;
  }


  def convertCollectionFromScalaToJava(type) {
    conversion = 'x.asScala';
    if(type.kind == CLASS_MAP) {
      conversion += '.map((a) => (' + createGenericFromTypeWithParamName(type.args[0], 'a._1') + ',' + createGenericFromTypeWithParamName(type.args[1], 'a._2') + '))';
    }
    else {
      var listType = type.args[0];
      if (listType.kind == CLASS_API) {
        conversion += '.map(' + toScalaApply(listType.getSimpleName()) + ')';
      } else if(listType.kind == CLASS_DATA_OBJECT) {
        conversion += '.map(x => ' + listType.getSimpleName() + '(x))';
      } else if (listType.kind == CLASS_PRIMITIVE ||
                 listType.kind == CLASS_BOXED_PRIMITIVE ||
                 listType.name == 'Throwable' ||
                 listType.name == 'java.lang.Throwable') {
        conversion += '.map(x => x:' + toOptionIfNullable(toScalaType(listType),listType) + ')';
      } else if (listType.kind == CLASS_STRING ||
                 listType.kind == CLASS_JSON_OBJECT ||
                 listType.kind == CLASS_JSON_ARRAY ||
                 listType.kind == CLASS_ENUM) {
      }
    }

    if (type.kind == CLASS_LIST) {
      conversion += '';
    } else if (type.kind == CLASS_SET) {
      conversion += '.toSet';
    } else if (type.kind == CLASS_MAP){
      conversion += '.toMap';
    }
    return conversion;
  }

  def methodInvocationHandlerAsyncResult(type, method) {
    var typeParam = type.args[0];
    var len = typeParam.name.length();
    var invocation = '';
    if (typeParam.kind == CLASS_PRIMITIVE ||
        typeParam.kind == CLASS_BOXED_PRIMITIVE ||
        typeParam.name == 'Throwable' ||
        typeParam.name == 'java.lang.Throwable') {
      invocation += method + '[' + changeJavaGenericNotationToScalaNotation(type) + ', ' + toOptionIfNullable(toScalaType(type),type) + '](x => io.vertx.lang.scala.AsyncResult['+changeJavaGenericNotationToScalaNotation(typeParam)', '+toScalaType(typeParam)+'](x,' + convertType(type.args[0])+'))('+param.name;
    } else if (typeParam.kind == CLASS_VOID ||
               (typeParam.kind == CLASS_OBJECT &&  len > 1) ||
               typeParam.kind == CLASS_STRING ||
               typeParam.kind == CLASS_JSON_OBJECT ||
               typeParam.kind == CLASS_JSON_ARRAY ||
               typeParam.kind == CLASS_ENUM ||
               typeParam.kind == CLASS_DATA_OBJECT ||
               typeParam.kind == CLASS_API ||
               typeParam.kind == CLASS_LIST ||
               typeParam.kind == CLASS_SET ||
               typeParam.kind == CLASS_MAP) {
      invocation +=  method + '[' + changeJavaGenericNotationToScalaNotation(type) + ', ' + toOptionIfNullable(toScalaType(type),type) + '](x => io.vertx.lang.scala.AsyncResult['+changeJavaGenericNotationToScalaNotation(typeParam)', '+toScalaType(typeParam)+'](x,' + convertType(type.args[0])+')('+ handleOption(param);
    } else if (typeParam.kind == CLASS_OBJECT) {
      invocation += 'funcToHandler[io.vertx.core.AsyncResult['+typeParam.name+']]('+param.name;
    }
    return invocation;
  }

  def convertType(type) {
    var invocation = '';
    if (type.kind == CLASS_PRIMITIVE ||
        type.kind == CLASS_BOXED_PRIMITIVE ||
        type.name == 'Throwable' ||
        type.name == 'java.lang.Throwable') {
      invocation += '(x => x)';
    } else if (type.kind == CLASS_VOID) {
      invocation += '(x => ())';
    } else if (type.kind == CLASS_OBJECT ||
               type.kind == CLASS_STRING ||
               type.kind == CLASS_JSON_OBJECT ||
               type.kind == CLASS_JSON_ARRAY ||
               type.kind == CLASS_ENUM) {
      invocation += '(x => x)';
    } else if(type.kind == CLASS_DATA_OBJECT) {
      invocation += '(x => ' + type.getSimpleName() + '(x))';
    } else if (type.kind == CLASS_API) {
      invocation += '(x => if (x == null) null else ' + toScalaApply(type.getSimpleName()) + '(x))';
    } else if (type.kind == CLASS_LIST ||
               type.kind == CLASS_SET ||
               type.kind == CLASS_MAP) {
      invocation += '(x => if (x == null) null else '+convertCollectionFromScalaToJava(type) + ')';
    }
    return invocation;
  }

  def methodInvocationHandlerCollection(type, method) {
    var invocation = method + '[' + changeJavaGenericNotationToScalaNotation(type) + ', ' + toOptionIfNullable(toScalaType(type),type) + '](x => if (x != null) ';
    invocation += convertCollectionFromScalaToJava(type);
    invocation += ' else null)('+param.name;

    return invocation;
  }

  def methodInvocationHandler(type, mappedFunc, func, convertUnit, param) {
    var invocation = '';

    if (type.kind == CLASS_API) {
      invocation += mappedFunc + '(' + toScalaApply(type.getSimpleName()) + ')('+ handleOption(param);
    } else if(type.kind == CLASS_DATA_OBJECT) {
      invocation += mappedFunc + '[' + changeJavaGenericNotationToScalaNotation(type) + ', ' + toScalaType(type) + '](a => '+type.getSimpleName()+'(a))('+ handleOption(param);
    } else if (type.kind == CLASS_LIST ||
               type.kind == CLASS_SET ||
               type.kind == CLASS_MAP) {
      invocation += methodInvocationHandlerCollection(type, mappedFunc);
    } else if(type.kind == CLASS_ASYNC_RESULT) {
      invocation += methodInvocationHandlerAsyncResult(type, mappedFunc);
    } else if (type.kind == CLASS_PRIMITIVE ||
               type.kind == CLASS_BOXED_PRIMITIVE ||
               type.name == 'Throwable' || type.name == 'java.lang.Throwable') {
      invocation += mappedFunc + '[' + changeJavaGenericNotationToScalaNotation(type) + ', ' + toOptionIfNullable(toScalaType(type),type) + '](x => x)('+handleOption(param);
    } else if (type.kind == CLASS_STRING ||
               type.kind == CLASS_JSON_OBJECT ||
               type.kind == CLASS_JSON_ARRAY) {
      invocation += func + '[' + changeJavaGenericNotationToScalaNotation(type) + '](' + handleOption(param);
    } else if (type.name == 'void' || type.name == 'java.lang.Void') {
      invocation += mappedFunc + '[' + changeJavaGenericNotationToScalaNotation(type) + ', ' + toOptionIfNullable(toScalaType(type),type) + '](x => x.asInstanceOf[Unit])(';
      if (convertUnit) {
        invocation += '_ => ';
      }
      if(param.type.args[0].kind == CLASS_VOID) {
         invocation += handleOption(param) + '()';
      }
      else {
         invocation +=  handleOption(param) + '(_)';
      }
    } else {
      invocation += func + '(' + handleOption(param);
    }

    return invocation;
  }

  def handleMethodParams(method) {
    var first = true;
    var invocation = '';
    var future = shouldMethodReturnAFuture(method);
    var params = method.params;
    var removed = null;
    if(future) {
      params = new java.util.ArrayList(params);
      removed = params.remove(params.size - 1);
    }
    for (param : params) {
      if (first) {
        first = false;
      } else {
        invocation += ', ';
      }
      if (isKeyword(param.name)) {
        invocation += escapeIfKeyword(param.name);
      } else {
        invocation += handleParamConversion(param);
      }
    }
    if(future) {
      if (!first) {
        invocation += ', ';
      }
      invocation += 'promiseAndHandler._1';
    }
    return invocation;
  }


  def handleParamConversion(param) {
    var invocation = '';
    if (param.type.kind == CLASS_LIST ||
      param.type.kind == CLASS_SET) {
      if (param.type.args[0].kind == CLASS_API) {
        invocation += handleOptionForCollection(param, '.map(x => if(x == null) null else x.asJava).asJava');
      } else if(param.type.args[0].kind == CLASS_DATA_OBJECT){
        invocation += handleOptionForCollection(param, '.map(x => if(x == null) null else x.asJava).asJava');
      } else {
        invocation += handleOptionForCollection(param, '.map(x => if(x == null) null else x:' + param.type.args[0].name + ').asJava');
      }
    } else if (param.type.kind == CLASS_MAP) {
    /*TODO do the same dance with x.java as above */
      if (param.type.args[0].kind == CLASS_API &&
        param.type.args[1].kind == CLASS_API) {
        invocation += handleOptionForCollection(param, '.map(kv => (kv._1.asJava.asInstanceOf[' + changeJavaGenericNotationToScalaNotation(param.type.args[0]) + '], kv._2.asJava.asInstanceOf[' + changeJavaGenericNotationToScalaNotation(param.type.args[1]) + '])).asJava');
      } else if (param.type.args[0].kind == CLASS_API) {
        invocation += handleOptionForCollection(param, '.map(kv => (kv._1.asJava.asInstanceOf[' + changeJavaGenericNotationToScalaNotation(param.type.args[0]) + '], kv._2:' + param.type.args[1].name + ')).asJava');
      } else if (param.type.args[1].kind == CLASS_API) {
        invocation += handleOptionForCollection(param, '.map(kv => (kv._1:' + param.type.args[0].name + ', if (kv._2 != null) kv._2.asJava.asInstanceOf[' + changeJavaGenericNotationToScalaNotation(param.type.args[1]) + '] else null)).asJava');
      } else {
        invocation += handleOptionForCollection(param, '.map(kv => (kv._1:' + param.type.args[0].name + ', kv._2:' + param.type.args[1].name + ')).asJava');
      }
    } else if (param.type.kind == CLASS_HANDLER) {
      var handlerType = param.type.args[0];
      invocation += methodInvocationHandler(handlerType, 'funcToMappedHandler', 'funcToHandler', true, param);
      invocation += ')';
    } else if (param.type.kind == CLASS_FUNCTION) {
      invocation += 'asJavaFunction(' + param.name + ')'
    } else {
      invocation += handleOption(param);
    }
    return invocation;
  }

  def handleMethodReturn(method) {
    var invocation = '';
    if (method.returnType.kind == CLASS_LIST) {
      if (method.returnType.args[0].kind == CLASS_API) {
        invocation += '.asScala.map(' + toScalaApply(method.returnType.args[0].getSimpleName()) + ')';
      } else if(method.returnType.args[0].kind == CLASS_DATA_OBJECT) {
        invocation += '.asScala.map(x => '+ method.returnType.args[0].simpleName +'(x))';
      } else {
        invocation += '.asScala.map(x => x:' + toOptionIfNullable(toScalaType(method.returnType.args[0]),method.returnType.args[0]) + ')';
      }
    } else if (method.returnType.kind == CLASS_SET) {
      if (method.returnType.args[0].kind == CLASS_API) {
        invocation += '.asScala.map(' + toScalaApply(method.returnType.args[0].getSimpleName()) + ').toSet';
      } else if(method.returnType.args[0].kind == CLASS_DATA_OBJECT) {
        invocation += '.asScala.map(x => '+ method.returnType.args[0].simpleName +'(x)).toSet';
      } else {
        invocation += '.asScala.map(x => x:' + toOptionIfNullable(toScalaType(method.returnType.args[0]),method.returnType.args[0]) + ').toSet';
      }
    } else if (method.returnType.kind == CLASS_MAP) {
      if (method.returnType.args[1].kind == CLASS_API) {
        invocation += '.asScala.map(kv => (kv._1, kv._2: ' + toScalaApply(method.returnType.args[1].getSimpleName()) + ')).toMap';
      } else if(method.returnType.args[1].kind == CLASS_DATA_OBJECT) {
        invocation += '.asScala.map(kv => (kv._1, '+ method.returnType.args[1].simpleName +'(kv._2))).toMap';
      } else if (method.returnType.args[1].kind == CLASS_STRING ||
            method.returnType.args[1].kind == CLASS_JSON_OBJECT ||
            method.returnType.args[1].kind == CLASS_JSON_ARRAY) {
        invocation += '.asScala.toMap';
      } else {
        invocation += '.asScala.map(kv => (kv._1, kv._2: ' + toOptionIfNullable(toScalaType(method.returnType.args[1]), method.returnType.args[1]) + ')).toMap';
      }
    } else if (method.returnType.kind == CLASS_HANDLER) {
      invocation += ')'
    }
    return invocation;
  }

  def methodInvocation(target, method, indentation) {
    var invocation = '';
    var fluent = method.isFluent();
    var future = shouldMethodReturnAFuture(method);
    var wrap = false;
    /*TODO I have to handle conversions with handlerToMappedFunction / methodInvocationHandlerAsyncResult*/
    if (method.returnType.kind == CLASS_HANDLER && method.returnType.args[0].kind == CLASS_ASYNC_RESULT) {
      if(method.returnType.args[0].args[0].kind != CLASS_API) {
        invocation += 'handlerToFunc[io.vertx.core.AsyncResult['+method.returnType.args[0].args[0]+']](' +target + '.' + escapeIfKeyword(method.name) + '(' + handleMethodParams(method) +')';
      }
      else {
        invocation += 'handlerToMappedFunction[io.vertx.core.AsyncResult['+method.returnType.args[0].args[0]+'], io.vertx.core.AsyncResult['+toScalaType(method.returnType.args[0].args[0])+']](s => if(s.failed()) io.vertx.lang.scala.ScalaAsyncResult(cause = s.cause()) else io.vertx.lang.scala.ScalaAsyncResult(result = s.result.asJava)) (' +target + '.' + escapeIfKeyword(method.name) + '(' + handleMethodParams(method) +')';
      }
    }
    else {if (method.returnType.kind == CLASS_HANDLER) {
        var ret = method.returnType.args[0];
        var scalaType = toOptionIfNullable(toScalaType(method.returnType.args[0]), method.returnType.args[0]);
        if (ret.kind == CLASS_API ||
            ret.kind == CLASS_DATA_OBJECT ||
            ret.kind == CLASS_ENUM) {
          invocation += 'handlerToMappedFunction[' + changeJavaGenericNotationToScalaNotation(ret) + ', ' + scalaType +'](x => x.asJava)(';
        } else if (ret.kind == CLASS_PRIMITIVE ||
                   ret.kind == CLASS_BOXED_PRIMITIVE ||
                   ret.name == 'Throwable' ||
                   ret.name == 'java.lang.Throwable') {
          invocation += 'handlerToFunc[' + scalaType +'](';
        } else if (ret.kind == CLASS_STRING ||
                   ret.kind == CLASS_JSON_OBJECT ||
                   ret.kind == CLASS_JSON_ARRAY) {
          invocation += 'handlerToFunc[' + scalaType +'](';
        } else {
          invocation += 'handlerToFunc[' + scalaType +'](';
        }
      }

      if (!fluent and method.returnType.kind == CLASS_API) {
        wrap = true;
        invocation += toScalaApply(method.returnType.getSimpleName()) + '(';
      }

      invocation += target + '.' + escapeIfKeyword(method.name) + '(' + handleMethodParams(method);

      if (wrap) {
        invocation += '))';
      } else {
        invocation += ')';
      }
    }

    var conversion = handleMethodReturn(method);

    if(method.returnType.kind == CLASS_DATA_OBJECT) {
      invocation = method.returnType.simpleName + '(' +invocation + ')';
    }

    if(method.returnType.isNullable){
      if(conversion != '') {
        invocation = indentation + 'scala.Option('+invocation+') match { case Some(x) => Some(x' + conversion + '); case None => None};\n'
      }
      else {
        if(method.returnType.kind == CLASS_PRIMITIVE || method.returnType.kind == CLASS_BOXED_PRIMITIVE) {
          invocation = indentation + 'nullsafeConvToOption('+invocation+');\n'
        }
        else {
          invocation = indentation + 'scala.Option('+invocation+')\n'
        }
      }
    }
    else {
      invocation += conversion + '\n';
    }

    if (method.isFluent() && !future) {
      invocation += indentation;
      invocation += 'this\n';
    }
    indentation + invocation;
  }

  /**
   * Check if a given method should be included in the generated class.
   */
  def includeMethod(method, instanceMethods) {
    if(method.name == 'addInterceptor') {
        return false;
    }
    if(method.name == 'removeInterceptor') {
        return false;
    }
    return true;
  }
}