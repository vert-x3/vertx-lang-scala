@code{

  def isKeyword(possibleKeyword) {
    if(possibleKeyword.equals("type")) {
      return true;
    }
    return false;
  }

  def escapeIfKeyword(possibleKeyword) {
    if(isKeyword(possibleKeyword)) {
      return '`' + possibleKeyword + '`';
    }
    return possibleKeyword;
  }

  def handleOptionForPrimitves(param) {
    if(param.type.isNullable) {
      return '(if('+param.name+'.isDefined) '+param.name+'.get else null)';
    }
    else {
      return param.name;
    }
  }

  def handleOptionForCollection(param) {
    if(param.type.isNullable) {
      if(param.type.kind == CLASS_LIST) {
        return param.name + '.getOrElse(List())'
      }
      else if(param.type.kind == CLASS_SET) {
        return param.name + '.getOrElse(Set())'
      }
      else if(param.type.kind == CLASS_MAP) {
        return param.name + '.getOrElse(Map())'
      }
    }
    else {
      return param.name;
    }
  }

  def toScalaTypeNotNullable(type) {
      var nullable = type.isNullable;
      var ret = '';
      if (type.name == 'void' || type.name == 'java.lang.Void') {
        ret = 'Unit';
      } else if (type.name == 'Object' || type.name == 'java.lang.Object') {
        ret = 'AnyRef';
      } else if (type.name == 'Throwable' || type.name == 'java.lang.Throwable') {
        ret = 'Throwable';
      } else if (type.kind == CLASS_STRING) {
        ret = 'String';
      } else if (type.kind == CLASS_PRIMITIVE || type.kind == CLASS_BOXED_PRIMITIVE) {
        if (type.name == 'byte' || type.name == 'java.lang.Byte') {
          ret = 'Byte';
        } else if (type.name == 'short' || type.name == 'java.lang.Short') {
          ret = 'Short';
        } else if (type.name == 'int' || type.name == 'java.lang.Integer') {
          ret = 'Int';
        } else if (type.name == 'long' || type.name == 'java.lang.Long') {
          ret = 'Long';
        } else if (type.name == 'float' || type.name == 'java.lang.Float') {
          ret = 'Float';
        } else if (type.name == 'double' || type.name == 'java.lang.Double') {
          ret = 'Double';
        } else if (type.name == 'boolean' || type.name == 'java.lang.Boolean') {
          ret = 'Boolean';
        } else if (type.name == 'char' || type.name == 'java.lang.Character') {
          ret = 'Char';
        }
      } else if (type.kind == CLASS_DATA_OBJECT || type.kind == CLASS_ENUM) {
        ret = type.name;
      } else if (type.kind == CLASS_LIST){
          if(type.args.isEmpty)
            ret = 'List';
          else if(type.args[0].params.isEmpty())
            ret = 'List[' + toScalaType(type.args[0]) + ']';
          else
            ret = 'List[' + toScalaType(type.args[0]) + '[_]]';
      } else if (type.kind == CLASS_SET){
          if(type.args.isEmpty)
            ret = 'Set';
          else if(type.args[0].params.isEmpty())
            ret = 'Set[' + toScalaType(type.args[0]) + ']';
          else
            ret = 'Set[' + toScalaType(type.args[0]) + '[_]]';
      } else if (type.kind == CLASS_MAP){
          if(type.args.isEmpty)
            ret = 'Map';
          else if(type.args[0].params.isEmpty())
            ret = 'Map[' + toScalaType(type.args[0]) + ', ' + toScalaType(type.args[1]) + ']';
          else
            ret ='Map[' + toScalaType(type.args[0]) + '[_], ' + toScalaType(type.args[1]) + '[_]]';
      } else if (type.kind == CLASS_HANDLER) {
        var type = toScalaType(type.args[0]);
        if (type.equals("Unit")) {
          ret = "() => Unit";
        } else {
          ret = type + " => Unit";
        }
      } else if (type.kind == CLASS_FUNCTION) {
        var type1 = changeJavaGenericNotationToScalaNotation(type.args[0]);
        var type2 = changeJavaGenericNotationToScalaNotation(type.args[1]);

        var ret = "";
        if (type1.equals("Unit")) {
          ret = "() => "+type2;
        } else {
          ret = type1 + " => " + type2;
        }
        ret = ret
      } else if (type.kind == CLASS_JSON_OBJECT ||
                 type.kind == CLASS_JSON_ARRAY){
        ret = changeJavaGenericNotationToScalaNotation(type)
      } else if (type.kind == CLASS_API) {
        var retVal = helper.getNonGenericType(type.translateName("scala"));
        if (type instanceof io.vertx.codegen.type.ParameterizedTypeInfo) {
          retVal += '[';
          var first = true;
          for (arg : type.args) {
            if (first) {
              first = false;
            } else {
              retVal += ', ';
            }
            retVal += toScalaType(arg);
          }
          retVal += ']';
        }
        ret = retVal;
      }
      else {
        ret = changeJavaGenericNotationToScalaNotation(type);
      }
      return ret;
    }

  def toScalaType(type) {
    var nullable = type.isNullable;
    var ret = '';
    if (type.name == 'void' || type.name == 'java.lang.Void') {
      ret = 'Unit';
    } else if (type.name == 'Object' || type.name == 'java.lang.Object') {
      ret = 'AnyRef';
    } else if (type.name == 'Throwable' || type.name == 'java.lang.Throwable') {
      ret = 'Throwable';
    } else if (type.kind == CLASS_STRING) {
      ret = 'String';
    } else if (type.kind == CLASS_PRIMITIVE || type.kind == CLASS_BOXED_PRIMITIVE) {
      if (type.name == 'byte' || type.name == 'java.lang.Byte') {
        ret = 'Byte';
      } else if (type.name == 'short' || type.name == 'java.lang.Short') {
        ret = 'Short';
      } else if (type.name == 'int' || type.name == 'java.lang.Integer') {
        ret = 'Int';
      } else if (type.name == 'long' || type.name == 'java.lang.Long') {
        ret = 'Long';
      } else if (type.name == 'float' || type.name == 'java.lang.Float') {
        ret = 'Float';
      } else if (type.name == 'double' || type.name == 'java.lang.Double') {
        ret = 'Double';
      } else if (type.name == 'boolean' || type.name == 'java.lang.Boolean') {
        ret = 'Boolean';
      } else if (type.name == 'char' || type.name == 'java.lang.Character') {
        ret = 'Char';
      }
    } else if (type.kind == CLASS_DATA_OBJECT || type.kind == CLASS_ENUM) {
      ret = type.name;
    } else if (type.kind == CLASS_LIST){
        if(type.args.isEmpty)
          ret = 'List';
        else if(type.args[0].params.isEmpty())
          ret = 'List[' + toScalaType(type.args[0]) + ']';
        else
          ret = 'List[' + toScalaType(type.args[0]) + '[_]]';
    } else if (type.kind == CLASS_SET){
        if(type.args.isEmpty)
          ret = 'Set';
        else if(type.args[0].params.isEmpty())
          ret = 'Set[' + toScalaType(type.args[0]) + ']';
        else
          ret = 'Set[' + toScalaType(type.args[0]) + '[_]]';
    } else if (type.kind == CLASS_MAP){
        if(type.args.isEmpty)
          ret = 'Map';
        else if(type.args[0].params.isEmpty())
          ret = 'Map[' + toScalaType(type.args[0]) + ', ' + toScalaType(type.args[1]) + ']';
        else
          ret ='Map[' + toScalaType(type.args[0]) + '[_], ' + toScalaType(type.args[1]) + '[_]]';
    } else if (type.kind == CLASS_HANDLER) {
      var type = toScalaType(type.args[0]);
      if (type.equals("Unit")) {
        ret = "() => Unit";
      } else {
        ret = type + " => Unit";
      }
    } else if (type.kind == CLASS_FUNCTION) {
      var type1 = changeJavaGenericNotationToScalaNotation(type.args[0]);
      var type2 = changeJavaGenericNotationToScalaNotation(type.args[1]);

      var ret = "";
      if (type1.equals("Unit")) {
        ret = "() => "+type2;
      } else {
        ret = type1 + " => " + type2;
      }
      ret = ret
    } else if (type.kind == CLASS_JSON_OBJECT ||
               type.kind == CLASS_JSON_ARRAY){
      ret = changeJavaGenericNotationToScalaNotation(type)
    } else if (type.kind == CLASS_API) {
      var retVal = helper.getNonGenericType(type.translateName("scala"));
      if (type instanceof io.vertx.codegen.type.ParameterizedTypeInfo) {
        retVal += '[';
        var first = true;
        for (arg : type.args) {
          if (first) {
            first = false;
          } else {
            retVal += ', ';
          }
          retVal += toScalaType(arg);
        }
        retVal += ']';
      }
      ret = retVal;
    }
    else {
      ret = changeJavaGenericNotationToScalaNotation(type);
    }
    if(nullable) {
      return 'scala.Option['+ret+']';
    }
    else {
      return ret;
    }
  }

  def changeJavaGenericNotationToScalaNotation(type) {
    type.name.replace('<', '[').replace('>', ']');
  }

  def getGenericType(name) {
    var start = name.indexOf("<");
    if (start >= 0) {
       var end = name.indexOf(">");
       return '[' + name.substring(start + 1, end) + ']';
    }
    return '';
  }

  def toScalaApply(name) {
    helper.getNonGenericType(name) + '.apply' + getGenericType(name);
  }

  def toScalaApplyWithParam(name, param) {
    helper.getNonGenericType(name) + '.apply' + getGenericType(name) + '(' + param + ')';
  }

  def isAsyncResult(param) {
    param.type.kind == CLASS_HANDLER && param.type.args[0].kind == CLASS_ASYNC_RESULT;
  }

  def importJavaConversions(method) {
    for (param : method.params) {
      if ((param.type.kind == CLASS_HANDLER &&
           param.type.args[0].kind.collection) ||
          (isAsyncResult(param) &&
           param.type.args[0].args[0].kind.collection) ||
          param.type.kind.collection) {
        return true;
      }
    }

    return method.returnType.kind.collection;
  }

  def returnTypeOf(method) {
    if (method.fluent) {
      toScalaType(method.returnType);
    } else if (method.returnType instanceof io.vertx.codegen.type.VoidTypeInfo) {
      'Unit';
    } else {
      toScalaType(method.returnType);
    }
  }

  def returnTypeOfNotNullable(method) {
    if (method.fluent) {
      toScalaTypeNotNullable(method.returnType);
    } else if (method.returnType instanceof io.vertx.codegen.type.VoidTypeInfo) {
      'Unit';
    } else {
      toScalaTypeNotNullable(method.returnType);
    }
  }

  def methodParams(method) {
    var paramList = '';
    var first = true;
    for (param : method.params) {
        if (first) {
          first = false;
        } else {
          paramList += ', ';
        }
        paramList += escapeIfKeyword(param.name) + ': ' + toScalaType(param.type);
    }
    paramList;
  }

  def multiMethodParams(method) {
    params = methodParams(method);
    if (params.isEmpty()) {
      params = '()';
    } else {
      params = '(' + params + ')';
    }
  }

  def createGenericFromTypeWithParamName(type, paramName) {
    var invocation = '';
    if (type.kind == CLASS_API ||
        type.kind == CLASS_DATA_OBJECT ||
        type.kind == CLASS_ENUM) {
      invocation += toScalaApplyWithParam(type.getSimpleName(), paramName);
    } else if (type.kind == CLASS_PRIMITIVE ||
               type.kind == CLASS_BOXED_PRIMITIVE ||
               type.name == 'Throwable' ||
               type.name == 'java.lang.Throwable') {
      invocation += paramName + ':' + toScalaType(type);
    } else if (type.kind == CLASS_STRING ||
               type.kind == CLASS_JSON_OBJECT ||
               type.kind == CLASS_JSON_ARRAY) {
      invocation += paramName;
    }
    return invocation;
  }

  def methodInvocationHandlerCollection(type, method) {
    var invocation = '';
    var mapIt = method + '[' + changeJavaGenericNotationToScalaNotation(type) + ', ' + toScalaType(type) + '](x => x.asScala';

    if(type.kind == CLASS_MAP) {
        invocation += mapIt + '.map((a) => (' + createGenericFromTypeWithParamName(type.args[0], 'a._1') + ',' + createGenericFromTypeWithParamName(type.args[1], 'a._2') + '))'
    }
    else {
      var listType = type.args[0];
      if (listType.kind == CLASS_API) {
        invocation += mapIt + '.map(' + toScalaApply(listType.getSimpleName()) + ')';
      } else if(listType.kind == CLASS_DATA_OBJECT) {
        invocation += mapIt;
      } else if (listType.kind == CLASS_PRIMITIVE || listType.kind == CLASS_BOXED_PRIMITIVE ||
                 listType.name == 'Throwable' || listType.name == 'java.lang.Throwable') {
        invocation += mapIt + '.map(x => x:' + toScalaType(listType) + ')';
      } else if (listType.kind == CLASS_STRING ||
                 listType.kind == CLASS_JSON_OBJECT ||
                 listType.kind == CLASS_JSON_ARRAY ||
                 listType.kind == CLASS_ENUM) {
        invocation += mapIt
      }
    }

    if (type.kind == CLASS_LIST) {
      invocation += '.toList)('+param.name;
    } else if (type.kind == CLASS_SET) {
      invocation += '.toSet)('+param.name;
    } else {
      invocation += '.toMap)('+param.name;
    }

    return invocation;
  }

  def methodInvocationHandler(type, mappedFunc, func, convertUnit, param) {
    var invocation = '';

    if (type.kind == CLASS_API) {
      invocation += mappedFunc + '(' + toScalaApply(type.getSimpleName()) + ')('+ handleOptionForPrimitves(param);
    } else if (type.kind == CLASS_LIST ||
               type.kind == CLASS_SET ||
               type.kind == CLASS_MAP) {
      invocation += methodInvocationHandlerCollection(type, mappedFunc);
    } else if (type.kind == CLASS_PRIMITIVE || type.kind == CLASS_BOXED_PRIMITIVE ||
               type.name == 'Throwable' || type.name == 'java.lang.Throwable') {
      invocation += mappedFunc + '[' + changeJavaGenericNotationToScalaNotation(type) + ', ' + toScalaType(type) + '](x => x)('+handleOptionForPrimitves(param);
    } else if (type.kind == CLASS_STRING ||
               type.kind == CLASS_JSON_OBJECT ||
               type.kind == CLASS_JSON_ARRAY) {
      invocation += func + '[' + changeJavaGenericNotationToScalaNotation(type) + '](' + handleOptionForPrimitves(param);
    } else if (type.name == 'void' || type.name == 'java.lang.Void') {
      invocation += mappedFunc + '[' + changeJavaGenericNotationToScalaNotation(type) + ', ' + toScalaType(type) + '](x => x.asInstanceOf[Unit])(';
      if (convertUnit) {
        invocation += '_ => ';
      }
      if(param.type.args[0].kind == CLASS_VOID) {
         invocation += handleOptionForPrimitves(param) + '()';
      }
      else {
         invocation +=  handleOptionForPrimitves(param) + '(_)';
      }
    } else {
      invocation += func + '(' + handleOptionForPrimitves(param);
    }

    return invocation;
  }

  def methodInvocation(target, method, indentation) {
    var invocation = indentation;
    var first = true;
    var fluent = method.isFluent();
    var wrap = false;

    /** TODO: UGLYYY } **/
    if (method.returnType.kind == CLASS_HANDLER) {
      var ret = method.returnType.args[0];
      var scalaType = toScalaType(method.returnType.args[0]);
      invocation += indentation;
      if (ret.kind == CLASS_API ||
          ret.kind == CLASS_DATA_OBJECT ||
          ret.kind == CLASS_ENUM) {
          /* TODO: x.asScala doesn't work for everything*/
        invocation += 'handlerToMappedFunction[' + changeJavaGenericNotationToScalaNotation(ret) + ', ' + scalaType +'](x => x.asJava)(';
      } else if (ret.kind == CLASS_PRIMITIVE ||
                 ret.kind == CLASS_BOXED_PRIMITIVE ||
                 ret.name == 'Throwable' ||
                 ret.name == 'java.lang.Throwable') {
        invocation += 'handlerToFunc[' + scalaType +'](';
      } else if (ret.kind == CLASS_STRING ||
                 ret.kind == CLASS_JSON_OBJECT ||
                 ret.kind == CLASS_JSON_ARRAY) {
        invocation += 'handlerToFunc[' + scalaType +'](';
      } else {
        invocation += 'handlerToFunc[' + scalaType +'](';
      }
    }

    if (!fluent and method.returnType.kind == CLASS_API) {
      wrap = true;
      invocation += toScalaApply(method.returnType.getSimpleName()) + '(';
    }

    invocation += target + '.' + method.name + '(';
    for (param : method.params) {
      if (first) {
        first = false;
      } else {
        invocation += ', ';
      }
      if (isKeyword(param.name)) {
        invocation += escapeIfKeyword(param.name);
      } else {
        if (param.type.kind == CLASS_LIST ||
            param.type.kind == CLASS_SET) {
          if (param.type.args[0].kind == CLASS_API) {
            invocation += handleOptionForCollection(param) + '.map(x => x.asJava).asJava';
          } else {
            invocation += handleOptionForCollection(param) + '.map(x => x:' + param.type.args[0].name + ').asJava';
          }
        } else if (param.type.kind == CLASS_MAP) {
          if (param.type.args[0].kind == CLASS_API &&
              param.type.args[1].kind == CLASS_API)
          {
            invocation += handleOptionForCollection(param) + '.map(kv => (kv._1.asJava.asInstanceOf[' + changeJavaGenericNotationToScalaNotation(param.type.args[0]) + '], kv._2.asJava.asInstanceOf[' + changeJavaGenericNotationToScalaNotation(param.type.args[1]) + '])).asJava';
          } else if (param.type.args[0].kind == CLASS_API) {
            invocation += handleOptionForCollection(param) + '.map(kv => (kv._1.asJava.asInstanceOf[' + changeJavaGenericNotationToScalaNotation(param.type.args[0]) + '], kv._2:' + param.type.args[1].name + ')).asJava';
          } else if (param.type.args[1].kind == CLASS_API) {
            invocation += handleOptionForCollection(param) + '.map(kv => (kv._1:' + param.type.args[0].name + ', kv._2.asJava.asInstanceOf[' + changeJavaGenericNotationToScalaNotation(param.type.args[1]) + '])).asJava';
          } else {
            invocation += handleOptionForCollection(param) + '.map(kv => (kv._1:' + param.type.args[0].name + ', kv._2:' + param.type.args[1].name + ')).asJava';
          }
        } else if (param.type.kind == CLASS_HANDLER) {
            var handlerType = param.type.args[0];
            invocation += methodInvocationHandler(handlerType, 'funcToMappedHandler', 'funcToHandler', true, param);
            invocation += ')';
        }
        else if (param.type.kind == CLASS_FUNCTION) {
            invocation += 'asJavaFunction(' + param.name + ')'
        }
        else {
          invocation += handleOptionForPrimitves(param);
        }
      }

      if (param.type.kind == CLASS_API) {
        invocation += '.asJava.asInstanceOf[' + changeJavaGenericNotationToScalaNotation(param.type) +']'
      }
    }
    if (wrap) {
      invocation += '))';
    } else {
      invocation += ')';
    }

    if (method.returnType.kind == CLASS_LIST) {
      if (method.returnType.args[0].kind == CLASS_API) {
        invocation += '.asScala.map(' + toScalaApply(method.returnType.args[0].getSimpleName()) + ').toList';
      } else {
        invocation += '.asScala.map(x => x:' + toScalaType(method.returnType.args[0]) + ').toList';
      }
    } else if (method.returnType.kind == CLASS_SET) {
      if (method.returnType.args[0].kind == CLASS_API) {
        invocation += '.asScala.map(' + toScalaApply(method.returnType.args[0].getSimpleName()) + ').toSet';
      } else {
        invocation += '.asScala.map(x => x:' + toScalaType(method.returnType.args[0]) + ').toSet';
      }
    } else if (method.returnType.kind == CLASS_MAP) {
      if (method.returnType.args[1].kind == CLASS_API) {
        invocation += '.asScala.map(kv => (kv._1, kv._2: ' + toScalaApply(method.returnType.args[1].getSimpleName()) + ')).toMap';
      } else if (method.returnType.args[1].kind == CLASS_STRING ||
                 method.returnType.args[1].kind == CLASS_JSON_OBJECT ||
                 method.returnType.args[1].kind == CLASS_JSON_ARRAY) {
        invocation += '.asScala.toMap';
      } else {
        invocation += '.asScala.map     (kv => (kv._1, kv._2: ' + toScalaType(method.returnType.args[1]) + ')).toMap';
      }
    } else if (method.returnType.kind == CLASS_HANDLER) {
      invocation += ')'
    }

    invocation += '\n';
    if (method.isFluent()) {
      invocation += indentation;
      invocation += 'this\n';
    }
    invocation;
  }

  def includeMethod(method, instanceMethods) {
    if(method.name == 'addInterceptor') {
        return false;
    }
    if(method.name == 'removeInterceptor') {
        return false;
    }
    return true;
  }
}