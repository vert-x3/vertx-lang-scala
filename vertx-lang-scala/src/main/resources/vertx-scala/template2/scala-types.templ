@code{
  def toScalaWithConversion(name, type, typeParams, methodTypeParams) {
    var nullable = type.isNullable;
    /*TODO: Bug, some types get returned as CLASS_OTHER instead of CLASS_VOID*/
    if (type.kind.basic) {
      if(nullable) {
        return 'scala.Option(' + name + '.asInstanceOf[' + typeNameForPrimitiveScala(type) + '])';
      }
      else {
        return name + '.asInstanceOf[' + typeNameForPrimitiveScala(type) + ']';
      }
    } else if (type.kind == CLASS_THROWABLE) {
      return name;
    } else if (type.kind == CLASS_OBJECT) {
      var ret = 'toScala[' + type.name + '](' + name + ')';
      if(nullable) {
        ret = 'scala.Option(' + ret + ')';
      }
      return ret;
    } else if (type.kind == CLASS_VOID || type.name == 'java.lang.Void' || type.name == 'void') {
      return name;
    }
    else if (type.kind == CLASS_JSON_OBJECT || type.kind == CLASS_JSON_ARRAY || type.kind == CLASS_ENUM) {
      if(nullable) {
        return 'scala.Option(' + name + ')';
      }
      else {
        return name;
      }
    } else if (type.kind == CLASS_DATA_OBJECT) {
      if(nullable) {
        return 'scala.Option(' + name + ').map(' + type.simpleName + '(_))';
      }
      else {
        return type.simpleName + '(' + name + ')';
      }
    } else if (type.kind == CLASS_API) {
      var args = '';
      if(type.isParameterized()) {
        for(arg : type.args) {
          if(args != '') {
            args += ',';
          }
          args += toScalaType(arg);
        }
        if (args != '')
          args = '[' + args + ']';
      }
      if(nullable) {
        return 'scala.Option(' + name + ').map(' + helper.getNonGenericType(type.simpleName) + args + '(_))';
      }
      else {
        return helper.getNonGenericType(type.simpleName) + args + '(' + name + ')';
      }
    } else if (type.kind == CLASS_HANDLER) {
      return '{x: ' + toScalaType(type.args[0]) + ' => ' + name + '.handle(' + toJavaWithConversion('x', type.args[0], typeParams, methodTypeParams) + ')}';
    } else if (type.kind == CLASS_ASYNC_RESULT) {
      return 'AsyncResultWrapper[' + toJavaTypeAndTypeParamTreatment(type.args[0], true) + ',' + toScalaType(type.args[0]) + '](x, a => ' + toScalaWithConversion('a', type.args[0], typeParams, methodTypeParams) + ')';
    } else if (type.kind.collection) {
      if (type.kind == CLASS_LIST){
        var conversion = '.asScala.map(x => '+ toScalaWithConversion('x', type.args[0], typeParams, methodTypeParams) +')';
        if(nullable) {
          return 'scala.Option(' + name + ').map(_' + conversion + ')';
        }
        else {
          return name + conversion;
        }
      } else if (type.kind == CLASS_SET){
        var conversion = '.asScala.map(x => '+ toScalaWithConversion('x', type.args[0], typeParams, methodTypeParams) +')';
        if(nullable) {
          return 'scala.Option(' + name + ').map(_' + conversion + ')';
        }
        else {
          return name + conversion;
        }
      } else if (type.kind == CLASS_MAP){
        /*TODO: this feels very expensive*/
        var conversion = '.asScala.mapValues(x => ' + toScalaWithConversion('x', type.args[1], typeParams, methodTypeParams) + ')';
        if(nullable) {
          return 'scala.Option(' + name + ').map(x => collection.mutable.Map(x' + conversion +'.toSeq: _*))';
        }
        else {
          return 'collection.mutable.Map('+ name + conversion + '.toSeq: _*)';
        }
      }
    }
    else {
      return 'WTF!!!!!!'+type.name+' '+type.kind;
    }
  }

  def toJavaWithConversion(name, type, typeParams, methodTypeParams) {
    var nullable = type.isNullable;
    /*TODO: Bug, some types get returned as CLASS_OTHER instead of CLASS_VOID*/
    if (type.kind.basic) {
      var ret = name + '.asInstanceOf[' + toJavaType(type) + ']';
      if(nullable)
        ret = name + '.map(x => x.asInstanceOf[' + toJavaType(type) + ']).getOrElse(null)';
      return ret;
    } else if (type.kind == CLASS_THROWABLE) {
      var ret = name;
      if(nullable)
        ret = name + '.map(x => x).getOrElse(null)';
      return ret;
    } else if (type.kind == CLASS_OBJECT) {
      var ret = name;
      if(nullable)
        ret = name + '.map(x => toJava['+type.simpleName+'](x)).getOrElse(null)';
      else
        ret = 'toJava['+type.simpleName+'](' + name + ')';
      return ret;
    } else if (type.kind == CLASS_CLASS_TYPE) {
      var ret = name+'.asInstanceOf[Class[Object]]';
      if(nullable)
        ret = name + '.map(x => x).getOrElse(null)';
      return ret;
    } else if (type.kind == CLASS_VOID || type.name == 'java.lang.Void' || type.name == 'void') {
      return name;
    }
    else if (type.kind == CLASS_JSON_OBJECT || type.kind == CLASS_JSON_ARRAY || type.kind == CLASS_ENUM) {
      var ret = name;
      if(nullable)
        ret = name + '.map(x => x).getOrElse(null)';
      return ret;
    } else if (type.kind == CLASS_DATA_OBJECT) {
      var ret = name + '.asJava';
      if(nullable)
        ret = name + '.map(' + name +' => ' + ret + ').getOrElse(null)';
      return ret;
    } else if (type.kind == CLASS_API) {
      var ret = name + '.asJava' + fromObjectToInstanceOf(type, typeParams, methodTypeParams);
      if(nullable)
        ret = name + '.map(' + name +' => ' + ret + ').getOrElse(null)';
      return ret;
    } else if (type.kind == CLASS_HANDLER) {
      return '{x: ' + toJavaTypeAndTypeParamTreatment(type.args[0], true) + ' => ' + name + '.handle(' + toScalaWithConversion('x', type.args[0], typeParams, methodTypeParams) + ')}';
    } else if (type.kind == CLASS_ASYNC_RESULT) {
      var ret = 'AsyncResultWrapper[' + toScalaTypeAndTypeParamTreatment(type.args[0], false) + ',' + toJavaTypeAndTypeParamTreatment(type.args[0], true) + '](x, a => ' + toJavaWithConversion('a', type.args[0], typeParams, methodTypeParams) + ')';
      if(nullable)
        ret = name + '.map(' + name +' => ' + ret + ').getOrElse(null)';
      return ret;
    } else if (type.kind.collection) {
      var ret = name;
      if (type.kind == CLASS_LIST){
        ret += '.map(x => '+ toJavaWithConversion('x', type.args[0], typeParams, methodTypeParams) +')';
      } else if (type.kind == CLASS_SET){
        ret += '.map(x => '+ toJavaWithConversion('x', type.args[0], typeParams, methodTypeParams) +')';
      } else if (type.kind == CLASS_MAP){
        ret += '.mapValues(x => '+ toJavaWithConversion('x', type.args[1], typeParams, methodTypeParams) +')';
      }
      ret += '.asJava';
      if(nullable)
        ret = name + '.map(' + name +' => ' + ret + ').getOrElse(null)';
      return ret;
    }
    else if(type.kind == CLASS_FUNCTION) {
      var executed = name;
      if(type.args[0].kind == CLASS_VOID)
        executed = executed + "()";
      else
        executed = executed + "(" +toScalaWithConversion('x', type.args[0], typeParams, methodTypeParams)+ ")";
      executed = toJavaWithConversion(executed, type.args[1], typeParams, methodTypeParams);
      var ret = "{x: " + toJavaTypeAndTypeParamTreatment(type.args[0], true) + " => " + executed + "}";
      if(nullable)
        ret = name + '.map(' + name +' => ' + ret + ').getOrElse(null)';
      return ret;
    }
    else {
      return 'WTF!!!!!!'+type.name+' '+type.kind;
    }
  }

  def toJavaType(type) {
    toJavaTypeAndTypeParamTreatment(type, false);
  }

  def toJavaTypeAndTypeParamTreatment(type, convertTypeParamsToObject) {
    var nullable = type.isNullable;
    /*TODO: Bug, some types get returned as CLASS_OTHER instead of CLASS_VOID*/
    if (type.kind.basic) {
      var typeName = type.name;
      if (type.name == 'byte') {
        typeName = 'java.lang.Byte';
      } else if (type.name == 'short') {
        typeName = 'java.lang.Short';
      } else if (type.name == 'int') {
        typeName = 'java.lang.Integer';
      } else if (type.name == 'long') {
        typeName = 'java.lang.Long';
      } else if (type.name == 'float') {
        typeName = 'java.lang.Float';
      } else if (type.name == 'double') {
        typeName = 'java.lang.Double';
      } else if (type.name == 'boolean') {
        typeName = 'java.lang.Boolean';
      } else if (type.name == 'char') {
        typeName = 'java.lang.Character';
      }
      return typeName;
    } else if (type.kind == CLASS_THROWABLE) {
      return type.simpleName;
    } else if (type.kind == CLASS_OBJECT) {
      if(convertTypeParamsToObject)
        return 'Object';
      else
        return type.simpleName;
    } else if (type.kind == CLASS_VOID || type.name == 'java.lang.Void' || type.name == 'void') {
      return type.simpleName;
    }
    else if (type.kind == CLASS_JSON_OBJECT || type.kind == CLASS_JSON_ARRAY || type.kind == CLASS_ENUM) {
      return type.simpleName;
    } else if (type.kind == CLASS_DATA_OBJECT) {
      return 'J' + type.simpleName;
    } else if (type.kind == CLASS_API) {
      var ret = 'J' + helper.getNonGenericType(type.simpleName);
      if(type.isParameterized()) {
        var args = '';
        for(arg : type.args) {
          if(args != '') {
            args += ',';
          }
          args += toJavaTypeAndTypeParamTreatment(arg, convertTypeParamsToObject);
        }
        ret += '[' + args + ']';
      } else if(!type.raw.params.isEmpty) {
        var args = '';
        for(arg : type.raw.params) {
          if(args != '') {
            args += ',';
          }
          args += 'Object';
        }
        ret += '[' + args + ']';
      }
      return ret;
    } else if (type.kind == CLASS_CLASS_TYPE) {
      var ret = type.simpleName;
      var args = '';
      for(arg : type.args) {
        if(args != '') {
          args += ',';
        }
        args += toJavaTypeAndTypeParamTreatment(arg, convertTypeParamsToObject);
      }
      return  ret + '[' + args + ']';
    } else if (type.kind == CLASS_HANDLER) {
      return 'Handler['+ toJavaTypeAndTypeParamTreatment(type.args[0], convertTypeParamsToObject) +']';
    } else if (type.kind.collection) {
      var ret = '';
      if (type.kind == CLASS_LIST){
        ret += 'java.util.List['+ toJavaTypeAndTypeParamTreatment(type.args[0], convertTypeParamsToObject) +']';
      } else if (type.kind == CLASS_SET){
        ret += 'java.util.Set['+ toJavaTypeAndTypeParamTreatment(type.args[0], convertTypeParamsToObject) +']';
      } else if (type.kind == CLASS_MAP){
        ret += 'java.util.Map[String, '+ toJavaTypeAndTypeParamTreatment(type.args[1], convertTypeParamsToObject) +']';
      }
      return ret;
    } else if(type.kind == CLASS_ASYNC_RESULT) {
      return helper.getNonGenericType(type.simpleName) + '['+ toJavaTypeAndTypeParamTreatment(type.args[0], convertTypeParamsToObject) +']';
    }
    else {
      return 'WTF!!!!!!'+type.name+' '+type.kind;
    }
  }

  def toScalaType(type) {
    toScalaTypeAndTypeParamTreatment(type, false);
  }

  def toScalaTypeAndTypeParamTreatment(type, convertTypeParamsToObject) {
    var nullable = type.isNullable;
    /*TODO: Bug, some types get returned as CLASS_OTHER instead of CLASS_VOID*/
    if (type.kind == CLASS_VOID || type.name == 'java.lang.Void' || type.name == 'void') {
      return 'Unit';
    } else if (type.kind == CLASS_OBJECT) {
      if(convertTypeParamsToObject) {
        return wrapInOptionIfNullable(nullable, 'Object');
      }
      else {
        if(type.name.contains('Object')){
          return wrapInOptionIfNullable(nullable, 'AnyRef');
        }
        else {
          return wrapInOptionIfNullable(nullable, type.name);
        }
      }
    } else if (type.kind == CLASS_THROWABLE) {
      return 'Throwable';
    } else if (type.kind.basic) {
      return wrapInOptionIfNullable(nullable, typeNameForPrimitiveScala(type));
    } else if (type.kind == CLASS_DATA_OBJECT) {
      return wrapInOptionIfNullable(nullable, type.simpleName);
    } else if (type.kind == CLASS_LIST){
        var ret = 'scala.collection.mutable.Buffer';
        if (!type.args.isEmpty)
          ret += '[' + toScalaTypeAndTypeParamTreatment(type.args[0], convertTypeParamsToObject) + ']';
        return wrapInOptionIfNullable(nullable, ret);
    } else if (type.kind == CLASS_SET){
        var ret = 'scala.collection.mutable.Set';
        if (!type.args.isEmpty)
          ret += '[' + toScalaTypeAndTypeParamTreatment(type.args[0], convertTypeParamsToObject) + ']';
        return wrapInOptionIfNullable(nullable, ret);
    } else if (type.kind == CLASS_MAP){
        var ret = 'scala.collection.mutable.Map';
        if (!type.args.isEmpty())
          ret += '[' + toScalaTypeAndTypeParamTreatment(type.args[0], convertTypeParamsToObject) + ', ' + toScalaTypeAndTypeParamTreatment(type.args[1], convertTypeParamsToObject) + ']';
        return wrapInOptionIfNullable(nullable, ret);
    } else if (type.kind == CLASS_HANDLER) {
      return "Handler[" + toScalaTypeAndTypeParamTreatment(type.args[0], convertTypeParamsToObject) + "]";
    } else if (type.kind == CLASS_FUNCTION) {
      var type1 = toScalaTypeAndTypeParamTreatment(type.args[0], convertTypeParamsToObject);
      var type2 = toScalaTypeAndTypeParamTreatment(type.args[1], convertTypeParamsToObject);

      var ret = "";
      if (type1.equals("Unit")) {
        ret = "() => "+type2;
      } else {
        ret = type1 + " => " + type2;
      }
      return wrapInOptionIfNullable(nullable, ret);
    } else if (type.kind == CLASS_JSON_OBJECT ||
               type.kind == CLASS_JSON_ARRAY ||
               type.kind == CLASS_ENUM){
      return wrapInOptionIfNullable(nullable, type.name);
    } else if (type.kind == CLASS_ASYNC_RESULT) {
      var ret = 'AsyncResult';
      if(!type.args.isEmpty)
        ret += '[' + toScalaTypeAndTypeParamTreatment(type.args[0], convertTypeParamsToObject) + ']';
      else
        ret += '[_]';
      return wrapInOptionIfNullable(nullable, ret);
    } else if (type.kind == CLASS_API) {
      var ret = helper.getNonGenericType(type.simpleName);
      if (type instanceof io.vertx.codegen.type.ParameterizedTypeInfo) {
        if(type.args.empty) {
          ret += '[_]';
        }
        else {
          ret += '[';
          var first = true;
          for (arg : type.args) {
            if (first) {
              first = false;
            } else {
              ret += ', ';
            }
            ret += toScalaTypeAndTypeParamTreatment(arg, convertTypeParamsToObject);
          }
          ret += ']';
        }
      }
      else if(type.name.contains('io.vertx.core.Future')) {
        ret += '[_]';
      }
      return wrapInOptionIfNullable(nullable, ret);
    }
    else if(type.kind == CLASS_CLASS_TYPE) {
        var ret = 'Class';
        if(type.args.empty) {
          ret += '[_]';
        }
        else {
          ret += '[';
          var first = true;
          for (arg : type.args) {
            if (first) {
              first = false;
            } else {
              ret += ', ';
            }
            ret += toScalaTypeAndTypeParamTreatment(arg, convertTypeParamsToObject);
          }
          ret += ']';
        }
        return ret;
    }
    else {
      return 'WTF!!!!!!'+type.name+' '+type.kind;
    }
  }

  def typeNameForPrimitiveScala(type) {
    if (type.name == 'byte' || type.name == 'java.lang.Byte') {
      return  'Byte';
    } else if (type.name == 'short' || type.name == 'java.lang.Short') {
      return  'Short';
    } else if (type.name == 'int' || type.name == 'java.lang.Integer') {
      return  'Int';
    } else if (type.name == 'long' || type.name == 'java.lang.Long') {
      return  'Long';
    } else if (type.name == 'float' || type.name == 'java.lang.Float') {
      return  'Float';
    } else if (type.name == 'double' || type.name == 'java.lang.Double') {
      return  'Double';
    } else if (type.name == 'boolean' || type.name == 'java.lang.Boolean') {
      return  'Boolean';
    } else if (type.name == 'char' || type.name == 'java.lang.Character') {
      return  'Char';
    } else if (type.kind == CLASS_STRING) {
      return  'String';
    }
    return 'WTF!!!';
  }

  def wrapInOptionIfNullable(nullable, expression) {
    if(nullable) {
      return 'scala.Option[' + expression + ']';
    }
    return expression;
  }

  def fromPropertyInfoToScalaTypeWithConversion(name, info) {
    var typeParams = new java.util.ArrayList();
    var methodTypeParams = new java.util.ArrayList();
    if (info.kind.isValue){
      return toScalaWithConversion(name, info.type, typeParams, methodTypeParams);
    } else if (info.kind.isList){
      return name + '.asScala.map(x => '+ toScalaWithConversion('x', info.type, typeParams, methodTypeParams) +')';
    } else if (info.kind.isSet){
      return name + '.asScala.map(x => '+ toScalaWithConversion('x', info.type, typeParams, methodTypeParams) +')';
    } else if (info.kind.isMap){
      return name + '.asScala.mapValues(x => '+ toScalaWithConversion('x', info.type, typeParams, methodTypeParams) +')';
    }
    return "UNKOWN PROPERTY TYPE";
  }


  def fromPropertyInfoToScala(info) {
    if (info.kind.isValue){
      return toScalaType(info.type);
    }else if (info.kind.isList){
      var ret = 'scala.collection.mutable.Buffer';
      ret += '[' + toScalaType(info.type) + ']';
      return ret;
    } else if (info.kind.isSet){
      var ret = 'scala.collection.mutable.Set';
      ret += '[' + toScalaType(info.type) + ']';
      return ret;
    } else if (info.kind.isMap){
      var ret = 'scala.collection.mutable.Map';
      ret += '[String, ' + toScalaType(info.type) + ']';
      return ret;
    }
    return "UNKOWN PROPERTY TYPE";
  }

  def assembleTypeParams(typeParams, withTypeParams) {
    if(!typeParams.isEmpty){
  		var ret = '';
  		for(param:typeParams){
  		  if(ret != '')
  		    ret += ',';
  		  ret += param.name;
  		  if(withTypeParams && param.name.length == 1) {
  		    ret += ':TypeTag';
  		  }
  		}
  		return '[' + ret + ']';
    }
    else {
      return '';
    }
  }

  def fromObjectToInstanceOf(type, typeParams, methodTypeParams) {
    var ret = '';
    if(type.name == 'io.vertx.core.Future' && !type.isParameterized()) {
      if(typeParams.isEmpty && methodTypeParams.isEmpty)
        ret += '.asInstanceOf[JFuture[_]]';
      else
        ret += '.asInstanceOf[JFuture[Object]]';
    }
    else {
      ret += '.asInstanceOf[' + toJavaTypeAndTypeParamTreatment(type, true) + ']';
    }
    return ret;
  }

  def escapeIfKeyword(possibleKeyword) {
    if (isKeyword(possibleKeyword)) {
      return '`' + possibleKeyword + '`';
    }
    return possibleKeyword;
  }

  def isKeyword(possibleKeyword) {
    if (possibleKeyword.equals("type")) {
      return true;
    }
    if (possibleKeyword.equals("object")) {
      return true;
    }
    return false;
  }

  def isParentConcrete(superTypes) {
    for(stype : superTypes) {
      if(stype.raw.concrete) {
        return true;
      }
    }
    return false;
  }

}
