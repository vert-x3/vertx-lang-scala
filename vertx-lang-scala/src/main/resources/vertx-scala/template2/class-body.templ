@code{
  var futureMethods = findFutureMethods(instanceMethods);
  var cacheReturnMethods = findCacheReturnMethods(instanceMethods);
  var fluentMethods = findFluentMethods(instanceMethods);
  var basicMethods = findBasicMethods(instanceMethods);
}
@if{superTypes.isEmpty || !isParentConcrete(superTypes)}  def asJava = _asJava\n@end{}
@code{var cached_counter = 0;}
@foreach{method : cacheReturnMethods}
  private var cached_@{cached_counter}:@{toScalaType(method.returnType)} = _\n
@code{cached_counter++}
@end{}
\n
//cached methods\n
@code{var cached_method_counter = 0}
@foreach{method : cacheReturnMethods}
  @if{isMethodNeedsOverride(type.name, method)}override @end{}
	def @{escapeIfKeyword(method.name)}
	@if{!method.typeParams.isEmpty}
	[@foreach{typeParam : method.typeParams}@{typeParam.name}@end{', '}]
	@end{}(
	@foreach{param:method.params}
		@{escapeIfKeyword(param.name)}: @{toScalaType(param.type)}
	@end{','}):@{toScalaType(method.returnType)} = {\n
    if(cached_@{cached_method_counter} == null) {\n
      var tmp = @{invokeMethodWithoutConvertingReturn('asJava' + fromObjectToInstanceOf(type), type, method, typeParams)}\n
      cached_@{cached_method_counter} = @{toScalaWithConversion('tmp', method.returnType, typeParams, method.typeParams)}\n
    }\n
    cached_@{cached_method_counter}\n
  }\n
	\n
	@code{cached_method_counter++}
@end{}

//fluent methods\n
@foreach{method : fluentMethods}
  @if{isMethodNeedsOverride(type.name, method)}override @end{}
	def @{escapeIfKeyword(method.name)}
	@if{!method.typeParams.isEmpty}
	[@foreach{typeParam : method.typeParams}@{typeParam.name}@end{', '}]
	@end{}(
	@foreach{param:method.params}
		@{escapeIfKeyword(param.name)}: @{toScalaType(param.type)}
	@end{','}):@{toScalaType(method.returnType)} = {\n
    @{invokeMethodWithoutConvertingReturn('asJava' + fromObjectToInstanceOf(type), type, method, typeParams)}\n
    this\n
  }\n
	\n
@end{}

//basic methods\n
@foreach{method : basicMethods}
  @if{isMethodNeedsOverride(type.name, method)}override @end{}
	def @{escapeIfKeyword(method.name)}
	@if{!method.typeParams.isEmpty}
	[@foreach{typeParam : method.typeParams}@{typeParam.name}@end{', '}]
	@end{}(
	@foreach{param:method.params}
		@{escapeIfKeyword(param.name)}: @{toScalaType(param.type)}
	@end{','}):@{toScalaType(method.returnType)} = {\n
    @{invokeMethod('asJava' + fromObjectToInstanceOf(type), type, method, typeParams)}\n
  }\n
	\n
@end{}
}\n

