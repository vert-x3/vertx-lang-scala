@code{
  var isAllSuperTypesAbstract = true;
  for(superType : superTypes) {
    if(!superType.isAbstract)
      isAllSuperTypesAbstract = false;
  }
}
  @if{!isAllSuperTypesAbstract}override @end{}def asJava = _asJava\n
@foreach{property:properties}
@if{property.doc != null}
\n
  /**\n
@{renderDoc("    *", property.doc, renderDocLink)}
    */\n
@end{}
@if{property.adder}
@if{property.isMap}
  @if{!property.isDeclared && !superTypes.isEmpty}override @end{}def @{property.adderMethod}(key: String, value: @{toScalaType(property.type, false)}) = {\n
    asJava.@{property.adderMethod}(key, @{toJavaWithConversion('value', property.type, new java.util.ArrayList(), new java.util.ArrayList())})\n
    this\n
  }\n
@else{}
  @if{!property.isDeclared && !superTypes.isEmpty}override @end{}def @{property.adderMethod}(value: @{toScalaType(property.type, false)}) = {\n
@if{property.type.kind == CLASS_DATA_OBJECT}
    asJava.@{property.adderMethod}(@{toJavaWithConversion('value', property.type, new java.util.ArrayList(), new java.util.ArrayList())})\n
@else{property.type.kind == CLASS_PRIMITIVE || property.type.kind == CLASS_BOXED_PRIMITIVE ||
 property.type.kind == CLASS_STRING || property.type.kind == CLASS_JSON_OBJECT ||
 property.type.kind == CLASS_JSON_ARRAY || property.type.kind == CLASS_ENUM || property.type.name == 'io.vertx.core.buffer.Buffer'}
    asJava.@{property.adderMethod}(value)\n
@else{}
    asJava.@{property.adderMethod}(value.asInstanceOf)\n
@end{}
    this\n
  }\n
@end{}
@end{}
@if{property.setter}
@if{property.isList}
  @if{!property.isDeclared && !superTypes.isEmpty}override @end{}def @{property.setterMethod}(value: scala.collection.mutable.Buffer[@{toScalaType(property.type, false)}]) = {\n
@if{property.type.kind == CLASS_PRIMITIVE || property.type.kind == CLASS_BOXED_PRIMITIVE}
    asJava.@{property.setterMethod}(value.map(@{toScalaType(property.type, false)}.box).asJava)\n
@else{(property.type.kind == CLASS_DATA_OBJECT || property.type.kind == CLASS_API) &&  property.type.name != 'io.vertx.core.buffer.Buffer'}
    asJava.@{property.setterMethod}(value.map(@{toJavaWithConversion('_', property.type, new java.util.ArrayList(), new java.util.ArrayList())}).asJava)\n
@else{}
    asJava.@{property.setterMethod}(value.asJava)\n
@end{}
    this\n
  }\n
@else{property.isSet}
  @if{!property.isDeclared && !superTypes.isEmpty}override @end{}def @{property.setterMethod}(value: Set[@{toScalaType(property.type, false)}]) = {\n
@if{property.type.kind == CLASS_PRIMITIVE || property.type.kind == CLASS_BOXED_PRIMITIVE}
    asJava.@{property.setterMethod}(value.map(@{toScalaType(property.type, false)}.box).asJava)\n
@else{(property.type.kind == CLASS_DATA_OBJECT || property.type.kind == CLASS_API) &&  property.type.name != 'io.vertx.core.buffer.Buffer'}
    asJava.@{property.setterMethod}(value.map(@{toJavaWithConversion('_', property.type, new java.util.ArrayList(), new java.util.ArrayList())}).asJava)\n
@else{}
    asJava.@{property.setterMethod}(value.asJava)\n
@end{}
    this\n
  }\n
@else{property.isMap}
  @if{!property.isDeclared && !superTypes.isEmpty}override @end{}def @{property.setterMethod}(value: Map[String, @{toScalaType(property.type, false)}]) = {\n
@if{property.type.kind == CLASS_PRIMITIVE || property.type.kind == CLASS_BOXED_PRIMITIVE}
    asJava.@{property.setterMethod}(value.mapValues(@{toScalaType(property.type, false)}.box).asJava)\n
@else{property.type.kind == CLASS_DATA_OBJECT}
    asJava.@{property.setterMethod}(value.mapValues(@{toJavaWithConversion('_', property.type, new java.util.ArrayList(), new java.util.ArrayList())}).asJava)\n
@else{}
    asJava.@{property.setterMethod}(value.asJava)\n
@end{}
    this\n
  }\n
@else{}
  @if{!property.isDeclared && !superTypes.isEmpty}override @end{}def @{property.setterMethod}(value: @{toScalaType(property.type, false)}) = {\n
@if{property.type.kind == CLASS_DATA_OBJECT}
    asJava.@{property.setterMethod}(@{toJavaWithConversion('value', property.type, new java.util.ArrayList(), new java.util.ArrayList())})\n
@else{property.type.kind == CLASS_PRIMITIVE || property.type.kind == CLASS_BOXED_PRIMITIVE ||
  property.type.kind == CLASS_STRING || property.type.kind == CLASS_JSON_OBJECT ||
  property.type.kind == CLASS_JSON_ARRAY || property.type.kind == CLASS_ENUM ||
  property.type.name != 'io.vertx.core.buffer.Buffer'}
    asJava.@{property.setterMethod}(value)\n
@else{}
    asJava.@{property.setterMethod}(value)\n
@end{}
    this\n
  }\n
@end{}
@end{}
@comment{Some necessary filtering as PropertyInfo has no information about static methods}
@if{(property.setter || property.adder) && property.getterMethod != null}
  @if{!property.isDeclared && !superTypes.isEmpty}override @end{}def @{property.getterMethod}: @{fromPropertyInfoToScala(property)} = {\n
    @{fromPropertyInfoToScalaTypeWithConversion('asJava.' + property.getterMethod + '()', property)}\n
  }\n
@end{}
@end{}
}\n
\n

object @{type.raw.simpleName} {\n
  \n
  def apply() = {\n
    new @{className}(new J@{className}(emptyObj()))\n
  }\n
  \n
  def apply(t: J@{className}) = {\n
    if(t != null)\n
      new @{className}(t)\n
    else\n
      null\n
  }\n
  \n
  def fromJson(json: JsonObject):@{className} = {\n
    if(json != null)\n
      new @{className}(new J@{className}(json))\n
    else\n
      null\n
  }\n
}\n
