  /**\n
    * Deploy a verticle instance that you have created yourself.\n
    * <p>\n
    * Vert.x will assign the verticle a context and start the verticle.\n
    * <p>\n
    * The actual deploy happens asynchronously and may not complete until after the call has returned.\n
    *\n
    * @param verticle the verticle instance to deploy.\n
    */\n
  def deployVerticle(verticle: ScalaVerticle): Unit = {\n
    asJava.asInstanceOf[JVertx].deployVerticle(verticle.asJava)\n
  }\n
\n
  /**\n
    * Like [[deployVerticle]] but returns a [[scala.concurrent.Future]] instead of taking an AsyncResultHandler.\n
    */\n
  def deployVerticleFuture(verticle: ScalaVerticle): scala.concurrent.Future[String] = {\n
    val promiseAndHandler = handlerForAsyncResultWithConversion[java.lang.String, String](x => x.asInstanceOf[String])\n
    asJava.asInstanceOf[JVertx].deployVerticle(verticle.asJava(), promiseAndHandler._1)\n
    promiseAndHandler._2.future\n
  }\n
\n
  /**\n
    * Like {@link #deployVerticle(Verticle)} but {@link io.vertx.core.DeploymentOptions} are provided to configure the\n
    * deployment.\n
    *\n
    * @param verticle the verticle instance to deploy\n
    * @param options  the deployment options.\n
    */\n
  def deployVerticle(verticle: ScalaVerticle, options: DeploymentOptions): Unit = {\n
    asJava.asInstanceOf[JVertx].deployVerticle(verticle.asJava, options.asJava)\n
  }\n
\n
  /**\n
    * Like [[deployVerticle]] but returns a [[scala.concurrent.Future]] instead of taking an AsyncResultHandler.\n
    */\n
  def deployVerticleFuture(verticle: ScalaVerticle, options: DeploymentOptions): scala.concurrent.Future[String] = {\n
    val promiseAndHandler = handlerForAsyncResultWithConversion[java.lang.String, String](x => x.asInstanceOf[String])\n
    asJava.asInstanceOf[JVertx].deployVerticle(verticle.asJava(), options.asJava, promiseAndHandler._1)\n
    promiseAndHandler._2.future\n
  }\n
