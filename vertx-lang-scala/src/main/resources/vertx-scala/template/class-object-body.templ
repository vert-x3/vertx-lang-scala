object @{className}{\n
  def apply@{assembleTypeParams(typeParams, true)}(asJava: J@{className}@{assembleTypeParamsAsObjects(typeParams)}) = new @{className}@{assembleTypeParams(typeParams, false)}(asJava)
  \n
	@foreach{method : staticMethods}
	@if{method.doc != null}@{methodDoc(method, '  ', false);}@end{}
	  def @{escapeIfKeyword(method.name)}
		@{assembleTypeParams(method.typeParams, true)}
		(
			@foreach{param:method.params}
				@{escapeIfKeyword(param.name)}: @{toScalaType(param.type, false)}
			@end{','}): @{toScalaType(method.returnType, false)} = {\n
	    @{invokeStaticMethod('J'+className, type, method)}\n
	  }\n
		\n
	@end{}
}\n
