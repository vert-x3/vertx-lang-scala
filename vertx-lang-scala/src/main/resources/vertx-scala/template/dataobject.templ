@comment{"# Template for DataObject code generation"}

@comment{"# Defines a few helper functions"}
@includeNamed{'scala-doc.templ'}
@includeNamed{'scala-helpers.templ'}

/*\n
 * Copyright 2014 Red Hat, Inc.\n
 *\n
 * Red Hat licenses this file to you under the Apache License, version 2.0\n
 * (the "License"); you may not use this file except in compliance with the\n
 * License.  You may obtain a copy of the License at:\n
 *\n
 * http://www.apache.org/licenses/LICENSE-2.0\n
 *\n
 * Unless required by applicable law or agreed to in writing, software\n
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT\n
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the\n
 * License for the specific language governing permissions and limitations\n
 * under the License.\n
 */\n\n
@code{
  var typeName = type.raw.simpleName;
  var jTypeName = convertTypeNameToAliasedTypeName(type);
}


package @{type.raw.translatePackageName("scala")}\n
\n

@comment{"# Generate the imports"}
import io.vertx.core.json.JsonObject\n
import scala.collection.JavaConverters._\n
import io.vertx.lang.scala.json.Json._\n
import @{convertTypeToAliasedType(type)+"\n"}
@foreach{importedType : importedTypes}
	@if{superType != null && (superType.toString() == importedType.toString())}
	@else{importedType.kind == CLASS_API}
import @{convertTypeToAliasedType(importedType)+"\n"}
import @{importedType.raw.translateName("scala")}\n
	@else{importedType.kind == CLASS_JSON_OBJECT ||
				importedType.kind == CLASS_JSON_ARRAY ||
				importedType.kind == CLASS_ENUM}
import @{importedType.raw}\n
	@else{importedType.kind != CLASS_ASYNC_RESULT &&
				!importedType.packageName.equals("java.lang") &&
				importedType.kind != CLASS_HANDLER &&
				importedType.kind != CLASS_LIST &&
				importedType.kind != CLASS_SET &&
				importedType.kind != CLASS_MAP}
import @{convertTypeToAliasedType(importedType)+"\n"}
import @{importedType.raw.translateName("scala")}\n
	@end{}
@end{}
\n

@comment{"# Generate the Class or Interface/Trait"}

@if{doc != null}
/**\n
@{renderDoc("  *", doc, renderDocLink)}
  */\n
@end{}
\n

@if{concrete}
	class @{typeName}(val asJava: @{jTypeName})
@else{}
	trait @{typeName}
@end{}
 {\n
\n

@if{concrete}
	@includeNamed{'dataobject-concrete.templ'}
@else{}
	@includeNamed{'dataobject-trait.templ'}
@end{}
